
stm32f302x8_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000174  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d8  08000174  08000174  00001174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800094c  0800094c  0000194c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000958  08000958  00001968  2**0
                  CONTENTS
  4 .ARM          00000008  08000958  08000958  00001958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000960  08000968  00001968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000960  08000960  00001960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000964  08000964  00001964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000968  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000968  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e8c  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d8  00000000  00000000  0000281e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00002bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000cb  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002554  00000000  00000000  00002dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016f2  00000000  00000000  00005327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008c66  00000000  00000000  00006a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000f67f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000364  00000000  00000000  0000f6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0000fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000174 <__do_global_dtors_aux>:
 8000174:	b510      	push	{r4, lr}
 8000176:	4c05      	ldr	r4, [pc, #20]	@ (800018c <__do_global_dtors_aux+0x18>)
 8000178:	7823      	ldrb	r3, [r4, #0]
 800017a:	b933      	cbnz	r3, 800018a <__do_global_dtors_aux+0x16>
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <__do_global_dtors_aux+0x1c>)
 800017e:	b113      	cbz	r3, 8000186 <__do_global_dtors_aux+0x12>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x20>)
 8000182:	f3af 8000 	nop.w
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	20000000 	.word	0x20000000
 8000190:	00000000 	.word	0x00000000
 8000194:	08000934 	.word	0x08000934

08000198 <frame_dummy>:
 8000198:	b508      	push	{r3, lr}
 800019a:	4b03      	ldr	r3, [pc, #12]	@ (80001a8 <frame_dummy+0x10>)
 800019c:	b11b      	cbz	r3, 80001a6 <frame_dummy+0xe>
 800019e:	4903      	ldr	r1, [pc, #12]	@ (80001ac <frame_dummy+0x14>)
 80001a0:	4803      	ldr	r0, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	bd08      	pop	{r3, pc}
 80001a8:	00000000 	.word	0x00000000
 80001ac:	20000004 	.word	0x20000004
 80001b0:	08000934 	.word	0x08000934

080001b4 <strlen>:
 80001b4:	4603      	mov	r3, r0
 80001b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ba:	2a00      	cmp	r2, #0
 80001bc:	d1fb      	bne.n	80001b6 <strlen+0x2>
 80001be:	1a18      	subs	r0, r3, r0
 80001c0:	3801      	subs	r0, #1
 80001c2:	4770      	bx	lr

080001c4 <SPI2_GPIO_Init>:
 * PB13 - SCLK
 * PB14 - MISO
 * PB15 - MOSI
 * ALT function mode : 5
 */
void SPI2_GPIO_Init(void) {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0

	GPIOx_Handle_t SPI_Pin;

	SPI_Pin.pGPIOx = GPIOB;
 80001ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000204 <SPI2_GPIO_Init+0x40>)
 80001cc:	607b      	str	r3, [r7, #4]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_ALT;
 80001ce:	2302      	movs	r3, #2
 80001d0:	727b      	strb	r3, [r7, #9]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
 80001d2:	2303      	movs	r3, #3
 80001d4:	72bb      	strb	r3, [r7, #10]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;
 80001d6:	2300      	movs	r3, #0
 80001d8:	72fb      	strb	r3, [r7, #11]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_OPType = GPIO_OP_TYPE_PP;
 80001da:	2300      	movs	r3, #0
 80001dc:	733b      	strb	r3, [r7, #12]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_AltFun = 5;
 80001de:	2305      	movs	r3, #5
 80001e0:	737b      	strb	r3, [r7, #13]
	// NSS
	//SPI_Pin.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_12;
	//GPIO_Init(&SPI_Pin);

	// SCLK
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_13;
 80001e2:	230d      	movs	r3, #13
 80001e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pin);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f875 	bl	80002d8 <GPIO_Init>
	// MISO
	//SPI_Pin.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_14;
	//GPIO_Init(&SPI_Pin);

	// MOSI
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_15;
 80001ee:	230f      	movs	r3, #15
 80001f0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pin);
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f86f 	bl	80002d8 <GPIO_Init>


}
 80001fa:	bf00      	nop
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	48000400 	.word	0x48000400

08000208 <SPI2_Init>:

void SPI2_Init(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0

	SPIx_Handle_t SPI2_Handle;

	SPI2_Handle.pSPIx = SPI2;
 800020e:	4b0c      	ldr	r3, [pc, #48]	@ (8000240 <SPI2_Init+0x38>)
 8000210:	607b      	str	r3, [r7, #4]
	SPI2_Handle.SPI_Config.SPI_Bus_Config = SPI_BUS_FULL_DUPLEX;
 8000212:	2301      	movs	r3, #1
 8000214:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SPI_SCLK_Speed = SPI_SCLK_SPEED_DIV_2; // SCLK = 4 MHZ
 8000216:	2300      	movs	r3, #0
 8000218:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPI_Config.SPI_CRCL = SPI_CRCL_8_BITS;
 800021a:	2300      	movs	r3, #0
 800021c:	72fb      	strb	r3, [r7, #11]
	SPI2_Handle.SPI_Config.SPI_CPOL = SPI_CPLO_LOW;
 800021e:	2300      	movs	r3, #0
 8000220:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPI_Config.SPI_CPHA = SPI_CPLO_LOW;
 8000222:	2300      	movs	r3, #0
 8000224:	737b      	strb	r3, [r7, #13]
	SPI2_Handle.SPI_Config.SPI_SSM = SPI_SSM_SW_EN;
 8000226:	2301      	movs	r3, #1
 8000228:	73bb      	strb	r3, [r7, #14]
	SPI2_Handle.SPI_Config.SPI_Device_Mode = SPI_DEVICE_MODE_M;
 800022a:	2301      	movs	r3, #1
 800022c:	723b      	strb	r3, [r7, #8]

	SPI_Init(&SPI2_Handle);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 faab 	bl	800078c <SPI_Init>
}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40003800 	.word	0x40003800

08000244 <main>:

int main(void) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

	char data[] = "Hello World";
 800024a:	4a0c      	ldr	r2, [pc, #48]	@ (800027c <main+0x38>)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000250:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// This is spi test to send_data "Hello World"
	SPI2_GPIO_Init();
 8000254:	f7ff ffb6 	bl	80001c4 <SPI2_GPIO_Init>

	SPI2_Init();
 8000258:	f7ff ffd6 	bl	8000208 <SPI2_Init>

	// Enable SPI2 peripheral
	SPI_Peri_CTRL(SPI2, ENABLE);
 800025c:	2101      	movs	r1, #1
 800025e:	4808      	ldr	r0, [pc, #32]	@ (8000280 <main+0x3c>)
 8000260:	f000 fb29 	bl	80008b6 <SPI_Peri_CTRL>


	SPI_Transmit_Data(SPI2, (uint8_t*) data, strlen(data));
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ffa4 	bl	80001b4 <strlen>
 800026c:	4602      	mov	r2, r0
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4619      	mov	r1, r3
 8000272:	4803      	ldr	r0, [pc, #12]	@ (8000280 <main+0x3c>)
 8000274:	f000 fae8 	bl	8000848 <SPI_Transmit_Data>

	while(1);
 8000278:	bf00      	nop
 800027a:	e7fd      	b.n	8000278 <main+0x34>
 800027c:	0800094c 	.word	0x0800094c
 8000280:	40003800 	.word	0x40003800

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	@ (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	@ (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	@ (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	@ (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	@ (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 fb1b 	bl	80008ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ffc5 	bl	8000244 <main>

080002ba <LoopForever>:

LoopForever:
  b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000968 	.word	0x08000968
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC1_2_IRQHandler>
	...

080002d8 <GPIO_Init>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

	// enable the peripheral clk
	GPIO_PCLK_CTRL(pGPIOHandle->pGPIOx, ENABLE);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2101      	movs	r1, #1
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f98a 	bl	8000600 <GPIO_PCLK_CTRL>

	// 1. configure the mode of GPIO pin
	uint32_t temp = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode <= GPIO_MODE_ANALOG) {
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	795b      	ldrb	r3, [r3, #5]
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	d820      	bhi.n	800033a <GPIO_Init+0x62>
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	795b      	ldrb	r3, [r3, #5]
 80002fc:	461a      	mov	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	fa02 f303 	lsl.w	r3, r2, r3
 8000308:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number)); // clearing
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	791b      	ldrb	r3, [r3, #4]
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	2103      	movs	r1, #3
 8000318:	fa01 f303 	lsl.w	r3, r1, r3
 800031c:	43db      	mvns	r3, r3
 800031e:	4619      	mov	r1, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	400a      	ands	r2, r1
 8000326:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	6819      	ldr	r1, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	430a      	orrs	r2, r1
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e09a      	b.n	8000470 <GPIO_Init+0x198>

	} else {

		// 1.1 configure interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_IT_FT) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	795b      	ldrb	r3, [r3, #5]
 800033e:	2b04      	cmp	r3, #4
 8000340:	d117      	bne.n	8000372 <GPIO_Init+0x9a>
			// falling edge
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 8000342:	4b97      	ldr	r3, [pc, #604]	@ (80005a0 <GPIO_Init+0x2c8>)
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	7912      	ldrb	r2, [r2, #4]
 800034a:	4611      	mov	r1, r2
 800034c:	2201      	movs	r2, #1
 800034e:	408a      	lsls	r2, r1
 8000350:	4611      	mov	r1, r2
 8000352:	4a93      	ldr	r2, [pc, #588]	@ (80005a0 <GPIO_Init+0x2c8>)
 8000354:	430b      	orrs	r3, r1
 8000356:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 8000358:	4b91      	ldr	r3, [pc, #580]	@ (80005a0 <GPIO_Init+0x2c8>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	7912      	ldrb	r2, [r2, #4]
 8000360:	4611      	mov	r1, r2
 8000362:	2201      	movs	r2, #1
 8000364:	408a      	lsls	r2, r1
 8000366:	43d2      	mvns	r2, r2
 8000368:	4611      	mov	r1, r2
 800036a:	4a8d      	ldr	r2, [pc, #564]	@ (80005a0 <GPIO_Init+0x2c8>)
 800036c:	400b      	ands	r3, r1
 800036e:	6093      	str	r3, [r2, #8]
 8000370:	e035      	b.n	80003de <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_IT_RT) {
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	795b      	ldrb	r3, [r3, #5]
 8000376:	2b05      	cmp	r3, #5
 8000378:	d117      	bne.n	80003aa <GPIO_Init+0xd2>
			// rising edge
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 800037a:	4b89      	ldr	r3, [pc, #548]	@ (80005a0 <GPIO_Init+0x2c8>)
 800037c:	68db      	ldr	r3, [r3, #12]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	7912      	ldrb	r2, [r2, #4]
 8000382:	4611      	mov	r1, r2
 8000384:	2201      	movs	r2, #1
 8000386:	408a      	lsls	r2, r1
 8000388:	43d2      	mvns	r2, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a84      	ldr	r2, [pc, #528]	@ (80005a0 <GPIO_Init+0x2c8>)
 800038e:	400b      	ands	r3, r1
 8000390:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 8000392:	4b83      	ldr	r3, [pc, #524]	@ (80005a0 <GPIO_Init+0x2c8>)
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	7912      	ldrb	r2, [r2, #4]
 800039a:	4611      	mov	r1, r2
 800039c:	2201      	movs	r2, #1
 800039e:	408a      	lsls	r2, r1
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a7f      	ldr	r2, [pc, #508]	@ (80005a0 <GPIO_Init+0x2c8>)
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6093      	str	r3, [r2, #8]
 80003a8:	e019      	b.n	80003de <GPIO_Init+0x106>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_IT_RFT) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	795b      	ldrb	r3, [r3, #5]
 80003ae:	2b06      	cmp	r3, #6
 80003b0:	d115      	bne.n	80003de <GPIO_Init+0x106>
			// both falling and rising edge
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 80003b2:	4b7b      	ldr	r3, [pc, #492]	@ (80005a0 <GPIO_Init+0x2c8>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	7912      	ldrb	r2, [r2, #4]
 80003ba:	4611      	mov	r1, r2
 80003bc:	2201      	movs	r2, #1
 80003be:	408a      	lsls	r2, r1
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a77      	ldr	r2, [pc, #476]	@ (80005a0 <GPIO_Init+0x2c8>)
 80003c4:	430b      	orrs	r3, r1
 80003c6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 80003c8:	4b75      	ldr	r3, [pc, #468]	@ (80005a0 <GPIO_Init+0x2c8>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	7912      	ldrb	r2, [r2, #4]
 80003d0:	4611      	mov	r1, r2
 80003d2:	2201      	movs	r2, #1
 80003d4:	408a      	lsls	r2, r1
 80003d6:	4611      	mov	r1, r2
 80003d8:	4a71      	ldr	r2, [pc, #452]	@ (80005a0 <GPIO_Init+0x2c8>)
 80003da:	430b      	orrs	r3, r1
 80003dc:	6093      	str	r3, [r2, #8]
		}

		// 1.2 configure the GPIO port selection in SYSCFG
		uint8_t temp_1 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) / 4;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	791b      	ldrb	r3, [r3, #4]
 80003e2:	089b      	lsrs	r3, r3, #2
 80003e4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp_2 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) % 4;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	f003 0303 	and.w	r3, r3, #3
 80003ee:	74bb      	strb	r3, [r7, #18]
		uint8_t port = GPIO_BASE_ADDR_TO_PORT(pGPIOHandle->pGPIOx);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003f8:	d01d      	beq.n	8000436 <GPIO_Init+0x15e>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a69      	ldr	r2, [pc, #420]	@ (80005a4 <GPIO_Init+0x2cc>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d016      	beq.n	8000432 <GPIO_Init+0x15a>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a67      	ldr	r2, [pc, #412]	@ (80005a8 <GPIO_Init+0x2d0>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d00f      	beq.n	800042e <GPIO_Init+0x156>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a66      	ldr	r2, [pc, #408]	@ (80005ac <GPIO_Init+0x2d4>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d008      	beq.n	800042a <GPIO_Init+0x152>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a64      	ldr	r2, [pc, #400]	@ (80005b0 <GPIO_Init+0x2d8>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d101      	bne.n	8000426 <GPIO_Init+0x14e>
 8000422:	2304      	movs	r3, #4
 8000424:	e008      	b.n	8000438 <GPIO_Init+0x160>
 8000426:	2300      	movs	r3, #0
 8000428:	e006      	b.n	8000438 <GPIO_Init+0x160>
 800042a:	2303      	movs	r3, #3
 800042c:	e004      	b.n	8000438 <GPIO_Init+0x160>
 800042e:	2302      	movs	r3, #2
 8000430:	e002      	b.n	8000438 <GPIO_Init+0x160>
 8000432:	2301      	movs	r3, #1
 8000434:	e000      	b.n	8000438 <GPIO_Init+0x160>
 8000436:	2300      	movs	r3, #0
 8000438:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800043a:	4b5e      	ldr	r3, [pc, #376]	@ (80005b4 <GPIO_Init+0x2dc>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a5d      	ldr	r2, [pc, #372]	@ (80005b4 <GPIO_Init+0x2dc>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp_1] = port << (temp_2 * 4);
 8000446:	7c7a      	ldrb	r2, [r7, #17]
 8000448:	7cbb      	ldrb	r3, [r7, #18]
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	fa02 f103 	lsl.w	r1, r2, r3
 8000450:	4a59      	ldr	r2, [pc, #356]	@ (80005b8 <GPIO_Init+0x2e0>)
 8000452:	7cfb      	ldrb	r3, [r7, #19]
 8000454:	3302      	adds	r3, #2
 8000456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 1.3 enable the EXTI interrupt delivery using IMR
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 800045a:	4b51      	ldr	r3, [pc, #324]	@ (80005a0 <GPIO_Init+0x2c8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	7912      	ldrb	r2, [r2, #4]
 8000462:	4611      	mov	r1, r2
 8000464:	2201      	movs	r2, #1
 8000466:	408a      	lsls	r2, r1
 8000468:	4611      	mov	r1, r2
 800046a:	4a4d      	ldr	r2, [pc, #308]	@ (80005a0 <GPIO_Init+0x2c8>)
 800046c:	430b      	orrs	r3, r1
 800046e:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Speed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	799b      	ldrb	r3, [r3, #6]
 8000478:	461a      	mov	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	689a      	ldr	r2, [r3, #8]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	2103      	movs	r1, #3
 8000494:	fa01 f303 	lsl.w	r3, r1, r3
 8000498:	43db      	mvns	r3, r3
 800049a:	4619      	mov	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	400a      	ands	r2, r1
 80004a2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	6899      	ldr	r1, [r3, #8]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	697a      	ldr	r2, [r7, #20]
 80004b0:	430a      	orrs	r2, r1
 80004b2:	609a      	str	r2, [r3, #8]

	// 3. configure pull up / down setting
	temp = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_PuPd << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	79db      	ldrb	r3, [r3, #7]
 80004bc:	461a      	mov	r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68da      	ldr	r2, [r3, #12]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	2103      	movs	r1, #3
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	4619      	mov	r1, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	400a      	ands	r2, r1
 80004e6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68d9      	ldr	r1, [r3, #12]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	697a      	ldr	r2, [r7, #20]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	60da      	str	r2, [r3, #12]


	// 4. configure the output type
	temp = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_OPType << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	7a1b      	ldrb	r3, [r3, #8]
 8000500:	461a      	mov	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	4619      	mov	r1, r3
 8000518:	2301      	movs	r3, #1
 800051a:	408b      	lsls	r3, r1
 800051c:	43db      	mvns	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6859      	ldr	r1, [r3, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	430a      	orrs	r2, r1
 8000536:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	temp = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_ALT) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d159      	bne.n	80005f8 <GPIO_Init+0x320>

		uint8_t temp1, temp2 = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	743b      	strb	r3, [r7, #16]

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) / 8;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	08db      	lsrs	r3, r3, #3
 800054e:	73fb      	strb	r3, [r7, #15]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) % 8;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	f003 0307 	and.w	r3, r3, #7
 8000558:	743b      	strb	r3, [r7, #16]

		if (temp1) {
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d02d      	beq.n	80005bc <GPIO_Init+0x2e4>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7a5b      	ldrb	r3, [r3, #9]
 8000564:	461a      	mov	r2, r3
 8000566:	7c3b      	ldrb	r3, [r7, #16]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	fa02 f303 	lsl.w	r3, r2, r3
 800056e:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * temp2));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000576:	7c3b      	ldrb	r3, [r7, #16]
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	210f      	movs	r1, #15
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	43db      	mvns	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	400a      	ands	r2, r1
 800058a:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	430a      	orrs	r2, r1
 800059a:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
			pGPIOHandle->pGPIOx->AFRL |= temp;
		}
	}

}
 800059c:	e02c      	b.n	80005f8 <GPIO_Init+0x320>
 800059e:	bf00      	nop
 80005a0:	40010400 	.word	0x40010400
 80005a4:	48000400 	.word	0x48000400
 80005a8:	48000800 	.word	0x48000800
 80005ac:	48000c00 	.word	0x48000c00
 80005b0:	48001400 	.word	0x48001400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7a5b      	ldrb	r3, [r3, #9]
 80005c0:	461a      	mov	r2, r3
 80005c2:	7c3b      	ldrb	r3, [r7, #16]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a1a      	ldr	r2, [r3, #32]
 80005d2:	7c3b      	ldrb	r3, [r7, #16]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	210f      	movs	r1, #15
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	400a      	ands	r2, r1
 80005e6:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6a19      	ldr	r1, [r3, #32]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	697a      	ldr	r2, [r7, #20]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	621a      	str	r2, [r3, #32]
}
 80005f8:	bf00      	nop
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <GPIO_PCLK_CTRL>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_PCLK_CTRL(GPIO_REG_t *pGPIOx, uint8_t EnDi){
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]

	if (EnDi == ENABLE) {
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d136      	bne.n	8000680 <GPIO_PCLK_CTRL+0x80>
		if (pGPIOx == GPIOA) {
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000618:	d106      	bne.n	8000628 <GPIO_PCLK_CTRL+0x28>
			GPIOA_PCLK_EN();
 800061a:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a36      	ldr	r2, [pc, #216]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 8000620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000624:	6153      	str	r3, [r2, #20]
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 8000626:	e061      	b.n	80006ec <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a34      	ldr	r2, [pc, #208]	@ (80006fc <GPIO_PCLK_CTRL+0xfc>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d106      	bne.n	800063e <GPIO_PCLK_CTRL+0x3e>
			GPIOB_PCLK_EN();
 8000630:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a30      	ldr	r2, [pc, #192]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 8000636:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800063a:	6153      	str	r3, [r2, #20]
}
 800063c:	e056      	b.n	80006ec <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a2f      	ldr	r2, [pc, #188]	@ (8000700 <GPIO_PCLK_CTRL+0x100>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d106      	bne.n	8000654 <GPIO_PCLK_CTRL+0x54>
			GPIOC_PCLK_EN();
 8000646:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a2b      	ldr	r2, [pc, #172]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 800064c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000650:	6153      	str	r3, [r2, #20]
}
 8000652:	e04b      	b.n	80006ec <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a2b      	ldr	r2, [pc, #172]	@ (8000704 <GPIO_PCLK_CTRL+0x104>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d106      	bne.n	800066a <GPIO_PCLK_CTRL+0x6a>
			GPIOD_PCLK_EN();
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a25      	ldr	r2, [pc, #148]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 8000662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000666:	6153      	str	r3, [r2, #20]
}
 8000668:	e040      	b.n	80006ec <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a26      	ldr	r2, [pc, #152]	@ (8000708 <GPIO_PCLK_CTRL+0x108>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d13c      	bne.n	80006ec <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_EN();
 8000672:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a20      	ldr	r2, [pc, #128]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 8000678:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800067c:	6153      	str	r3, [r2, #20]
}
 800067e:	e035      	b.n	80006ec <GPIO_PCLK_CTRL+0xec>
		if (pGPIOx == GPIOA) {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000686:	d106      	bne.n	8000696 <GPIO_PCLK_CTRL+0x96>
			GPIOA_PCLK_DI();
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a1a      	ldr	r2, [pc, #104]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 800068e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000692:	6153      	str	r3, [r2, #20]
}
 8000694:	e02a      	b.n	80006ec <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a18      	ldr	r2, [pc, #96]	@ (80006fc <GPIO_PCLK_CTRL+0xfc>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <GPIO_PCLK_CTRL+0xac>
			GPIOB_PCLK_DI();
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 80006a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006a8:	6153      	str	r3, [r2, #20]
}
 80006aa:	e01f      	b.n	80006ec <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a14      	ldr	r2, [pc, #80]	@ (8000700 <GPIO_PCLK_CTRL+0x100>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d106      	bne.n	80006c2 <GPIO_PCLK_CTRL+0xc2>
			GPIOC_PCLK_DI();
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 80006ba:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80006be:	6153      	str	r3, [r2, #20]
}
 80006c0:	e014      	b.n	80006ec <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <GPIO_PCLK_CTRL+0x104>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d106      	bne.n	80006d8 <GPIO_PCLK_CTRL+0xd8>
			GPIOD_PCLK_DI();
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 80006d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80006d4:	6153      	str	r3, [r2, #20]
}
 80006d6:	e009      	b.n	80006ec <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <GPIO_PCLK_CTRL+0x108>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d105      	bne.n	80006ec <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_DI();
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <GPIO_PCLK_CTRL+0xf8>)
 80006e6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80006ea:	6153      	str	r3, [r2, #20]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000400 	.word	0x48000400
 8000700:	48000800 	.word	0x48000800
 8000704:	48000c00 	.word	0x48000c00
 8000708:	48001400 	.word	0x48001400

0800070c <SPI_PCLK_CTRL>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void SPI_PCLK_CTRL(SPI_REG_t *pSPIx, uint8_t EnDi) {
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]

	if (EnDi == ENABLE) {
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d115      	bne.n	800074a <SPI_PCLK_CTRL+0x3e>
		if (pSPIx == SPI2) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a17      	ldr	r2, [pc, #92]	@ (8000780 <SPI_PCLK_CTRL+0x74>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <SPI_PCLK_CTRL+0x28>
			SPI2_PCLK_EN();
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SPI_PCLK_CTRL+0x78>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <SPI_PCLK_CTRL+0x78>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000730:	61d3      	str	r3, [r2, #28]
		} else if (pSPIx == SPI3) {
			SPI3_PCLK_DI();
		}
	}

}
 8000732:	e01f      	b.n	8000774 <SPI_PCLK_CTRL+0x68>
		} else if (pSPIx == SPI3) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <SPI_PCLK_CTRL+0x7c>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d11b      	bne.n	8000774 <SPI_PCLK_CTRL+0x68>
			SPI3_PCLK_EN();
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <SPI_PCLK_CTRL+0x78>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <SPI_PCLK_CTRL+0x78>)
 8000742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000746:	61d3      	str	r3, [r2, #28]
}
 8000748:	e014      	b.n	8000774 <SPI_PCLK_CTRL+0x68>
		if (pSPIx == SPI2) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a0c      	ldr	r2, [pc, #48]	@ (8000780 <SPI_PCLK_CTRL+0x74>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <SPI_PCLK_CTRL+0x54>
			SPI2_PCLK_DI();
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <SPI_PCLK_CTRL+0x78>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a0b      	ldr	r2, [pc, #44]	@ (8000784 <SPI_PCLK_CTRL+0x78>)
 8000758:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800075c:	61d3      	str	r3, [r2, #28]
}
 800075e:	e009      	b.n	8000774 <SPI_PCLK_CTRL+0x68>
		} else if (pSPIx == SPI3) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <SPI_PCLK_CTRL+0x7c>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d105      	bne.n	8000774 <SPI_PCLK_CTRL+0x68>
			SPI3_PCLK_DI();
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <SPI_PCLK_CTRL+0x78>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <SPI_PCLK_CTRL+0x78>)
 800076e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000772:	61d3      	str	r3, [r2, #28]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40003800 	.word	0x40003800
 8000784:	40021000 	.word	0x40021000
 8000788:	40003c00 	.word	0x40003c00

0800078c <SPI_Init>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void SPI_Init(SPIx_Handle_t *pSPIHandle) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

	// peripheral clk enable
	SPI_PCLK_CTRL(pSPIHandle->pSPIx, ENABLE);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffb6 	bl	800070c <SPI_PCLK_CTRL>

	// configure the SPI_CR1 register
	uint32_t temp = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]

	// 1. Configure the device mode
	temp |= pSPIHandle->SPI_Config.SPI_Device_Mode << 2;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]

	// 2. Configure the bus
	if (pSPIHandle->SPI_Config.SPI_Bus_Config == SPI_BUS_FULL_DUPLEX) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	795b      	ldrb	r3, [r3, #5]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d104      	bne.n	80007c2 <SPI_Init+0x36>
		// Full Duplex mode
		temp &= ~(1 << SPI_CR1_BIDI_MODE);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e00b      	b.n	80007da <SPI_Init+0x4e>
	} else if (pSPIHandle->SPI_Config.SPI_Bus_Config == SPI_BUS_SIMPLEX_RX_ONLY) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	795b      	ldrb	r3, [r3, #5]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d107      	bne.n	80007da <SPI_Init+0x4e>
		// Simple receive only
		temp &= ~(1 << SPI_CR1_BIDI_MODE);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007d0:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RX_ONLY);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007d8:	60fb      	str	r3, [r7, #12]
	else if (pSPIHandle->SPI_Config.SPI_Bus_Config == SPI_BUS_SIMPLEX_TX_ONLY) {
		// Simple transmit only
	}

	// 3. Configure the clock speed
	temp |= pSPIHandle->SPI_Config.SPI_SCLK_Speed << SPI_CR1_BR;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	799b      	ldrb	r3, [r3, #6]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]

	// 4. Configure the CRCL
	temp |= pSPIHandle->SPI_Config.SPI_CRCL << SPI_CR1_CRCL;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	79db      	ldrb	r3, [r3, #7]
 80007ea:	02db      	lsls	r3, r3, #11
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]

	// 5. Configure the CPOL
	temp |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7a1b      	ldrb	r3, [r3, #8]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]

	// 6. Configure the CPHA
	temp |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7a5b      	ldrb	r3, [r3, #9]
 8000802:	461a      	mov	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4313      	orrs	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= temp;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6819      	ldr	r1, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	430a      	orrs	r2, r1
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <SPI_Get_Flag_Status>:
	}

}


uint8_t SPI_Get_Flag_Status(SPI_REG_t *pSPIx, uint32_t Flag_name) {
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]

	if (pSPIx->SR & Flag_name) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	4013      	ands	r3, r2
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SPI_Get_Flag_Status+0x1a>
		return FLAG_SET;
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <SPI_Get_Flag_Status+0x1c>
	}

	return FLAG_RESET;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <SPI_Transmit_Data>:
 *
 * Return			: None
 *
 * Note				: Blocking call
 */
void SPI_Transmit_Data(SPI_REG_t *pSPIx, uint8_t *pTx_Buffer, uint32_t Len) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]

	while (Len > 0) {
 8000854:	e027      	b.n	80008a6 <SPI_Transmit_Data+0x5e>

		// 1. wait until TXE set
		while(SPI_Get_Flag_Status(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000856:	bf00      	nop
 8000858:	2102      	movs	r1, #2
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff ffe1 	bl	8000822 <SPI_Get_Flag_Status>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f8      	beq.n	8000858 <SPI_Transmit_Data+0x10>

		// 2. check the DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_CRCL)) {
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00e      	beq.n	8000890 <SPI_Transmit_Data+0x48>
			// 16 bit
			pSPIx->DR = *((uint16_t*) pTx_Buffer);
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	60da      	str	r2, [r3, #12]
			Len--;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
			Len--;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTx_Buffer++;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3301      	adds	r3, #1
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	e00a      	b.n	80008a6 <SPI_Transmit_Data+0x5e>
		} else {
			// 8 bit
			pSPIx->DR = *pTx_Buffer;
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	60da      	str	r2, [r3, #12]
			Len--;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3b01      	subs	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
			pTx_Buffer++;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
	while (Len > 0) {
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1d4      	bne.n	8000856 <SPI_Transmit_Data+0xe>
		}


	}

};
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <SPI_Peri_CTRL>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void SPI_Peri_CTRL(SPI_REG_t *pSPIx, uint8_t EnDi) {
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	460b      	mov	r3, r1
 80008c0:	70fb      	strb	r3, [r7, #3]

	if (EnDi == ENABLE) {
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d106      	bne.n	80008d6 <SPI_Peri_CTRL+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 80008d4:	e005      	b.n	80008e2 <SPI_Peri_CTRL+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <__libc_init_array>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000924 <__libc_init_array+0x38>)
 80008f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000928 <__libc_init_array+0x3c>)
 80008f2:	1b64      	subs	r4, r4, r5
 80008f4:	10a4      	asrs	r4, r4, #2
 80008f6:	2600      	movs	r6, #0
 80008f8:	42a6      	cmp	r6, r4
 80008fa:	d109      	bne.n	8000910 <__libc_init_array+0x24>
 80008fc:	4d0b      	ldr	r5, [pc, #44]	@ (800092c <__libc_init_array+0x40>)
 80008fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000930 <__libc_init_array+0x44>)
 8000900:	f000 f818 	bl	8000934 <_init>
 8000904:	1b64      	subs	r4, r4, r5
 8000906:	10a4      	asrs	r4, r4, #2
 8000908:	2600      	movs	r6, #0
 800090a:	42a6      	cmp	r6, r4
 800090c:	d105      	bne.n	800091a <__libc_init_array+0x2e>
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f855 3b04 	ldr.w	r3, [r5], #4
 8000914:	4798      	blx	r3
 8000916:	3601      	adds	r6, #1
 8000918:	e7ee      	b.n	80008f8 <__libc_init_array+0xc>
 800091a:	f855 3b04 	ldr.w	r3, [r5], #4
 800091e:	4798      	blx	r3
 8000920:	3601      	adds	r6, #1
 8000922:	e7f2      	b.n	800090a <__libc_init_array+0x1e>
 8000924:	08000960 	.word	0x08000960
 8000928:	08000960 	.word	0x08000960
 800092c:	08000960 	.word	0x08000960
 8000930:	08000964 	.word	0x08000964

08000934 <_init>:
 8000934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000936:	bf00      	nop
 8000938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800093a:	bc08      	pop	{r3}
 800093c:	469e      	mov	lr, r3
 800093e:	4770      	bx	lr

08000940 <_fini>:
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000942:	bf00      	nop
 8000944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000946:	bc08      	pop	{r3}
 8000948:	469e      	mov	lr, r3
 800094a:	4770      	bx	lr
