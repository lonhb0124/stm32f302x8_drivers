
stm32f302x8_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000174  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000920  08000174  08000174  00001174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a94  08000a94  00001a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aa0  08000aa0  00001ab0  2**0
                  CONTENTS
  4 .ARM          00000008  08000aa0  08000aa0  00001aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000aa8  08000ab0  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa8  08000aa8  00001aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000aac  08000aac  00001aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ab0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ab0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fbf  00000000  00000000  00001ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000417  00000000  00000000  00002a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  00002eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e4  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025fc  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017d0  00000000  00000000  000056c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008d7c  00000000  00000000  00006e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000fc0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000420  00000000  00000000  0000fc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000174 <__do_global_dtors_aux>:
 8000174:	b510      	push	{r4, lr}
 8000176:	4c05      	ldr	r4, [pc, #20]	@ (800018c <__do_global_dtors_aux+0x18>)
 8000178:	7823      	ldrb	r3, [r4, #0]
 800017a:	b933      	cbnz	r3, 800018a <__do_global_dtors_aux+0x16>
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <__do_global_dtors_aux+0x1c>)
 800017e:	b113      	cbz	r3, 8000186 <__do_global_dtors_aux+0x12>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x20>)
 8000182:	f3af 8000 	nop.w
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	20000000 	.word	0x20000000
 8000190:	00000000 	.word	0x00000000
 8000194:	08000a7c 	.word	0x08000a7c

08000198 <frame_dummy>:
 8000198:	b508      	push	{r3, lr}
 800019a:	4b03      	ldr	r3, [pc, #12]	@ (80001a8 <frame_dummy+0x10>)
 800019c:	b11b      	cbz	r3, 80001a6 <frame_dummy+0xe>
 800019e:	4903      	ldr	r1, [pc, #12]	@ (80001ac <frame_dummy+0x14>)
 80001a0:	4803      	ldr	r0, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	bd08      	pop	{r3, pc}
 80001a8:	00000000 	.word	0x00000000
 80001ac:	20000004 	.word	0x20000004
 80001b0:	08000a7c 	.word	0x08000a7c

080001b4 <strlen>:
 80001b4:	4603      	mov	r3, r0
 80001b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ba:	2a00      	cmp	r2, #0
 80001bc:	d1fb      	bne.n	80001b6 <strlen+0x2>
 80001be:	1a18      	subs	r0, r3, r0
 80001c0:	3801      	subs	r0, #1
 80001c2:	4770      	bx	lr

080001c4 <SPI2_GPIO_Init>:
 * PB14 - MISO
 * PB15 - MOSI
 * ALT function mode : 5
 */

void SPI2_GPIO_Init(void) {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0

	GPIOx_Handle_t SPI_Pin;

	SPI_Pin.pGPIOx = GPIOB;
 80001ca:	4b11      	ldr	r3, [pc, #68]	@ (8000210 <SPI2_GPIO_Init+0x4c>)
 80001cc:	607b      	str	r3, [r7, #4]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_ALT;
 80001ce:	2302      	movs	r3, #2
 80001d0:	727b      	strb	r3, [r7, #9]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
 80001d2:	2303      	movs	r3, #3
 80001d4:	72bb      	strb	r3, [r7, #10]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;
 80001d6:	2300      	movs	r3, #0
 80001d8:	72fb      	strb	r3, [r7, #11]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_OPType = GPIO_OP_TYPE_PP;
 80001da:	2300      	movs	r3, #0
 80001dc:	733b      	strb	r3, [r7, #12]
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_AltFun = 5;
 80001de:	2305      	movs	r3, #5
 80001e0:	737b      	strb	r3, [r7, #13]

	// NSS
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_12;
 80001e2:	230c      	movs	r3, #12
 80001e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pin);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f8d9 	bl	80003a0 <GPIO_Init>

	// SCLK
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_13;
 80001ee:	230d      	movs	r3, #13
 80001f0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pin);
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f8d3 	bl	80003a0 <GPIO_Init>
	// MISO
	//SPI_Pin.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_14;
	//GPIO_Init(&SPI_Pin);

	// MOSI
	SPI_Pin.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_15;
 80001fa:	230f      	movs	r3, #15
 80001fc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pin);
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f8cd 	bl	80003a0 <GPIO_Init>


}
 8000206:	bf00      	nop
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	48000400 	.word	0x48000400

08000214 <SPI2_Init>:

void SPI2_Init(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0

	SPIx_Handle_t SPI2_Handle;

	SPI2_Handle.pSPIx = SPI2;
 800021a:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <SPI2_Init+0x38>)
 800021c:	607b      	str	r3, [r7, #4]
	SPI2_Handle.SPI_Config.SPI_Bus_Config = SPI_BUS_FULL_DUPLEX;
 800021e:	2301      	movs	r3, #1
 8000220:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SPI_SCLK_Speed = SPI_SCLK_SPEED_DIV_4; // SCLK = 2 MHZ
 8000222:	2301      	movs	r3, #1
 8000224:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPI_Config.SPI_CRCL = SPI_CRCL_8_BITS;
 8000226:	2300      	movs	r3, #0
 8000228:	72fb      	strb	r3, [r7, #11]
	SPI2_Handle.SPI_Config.SPI_CPOL = SPI_CPLO_LOW;
 800022a:	2300      	movs	r3, #0
 800022c:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPI_Config.SPI_CPHA = SPI_CPLO_LOW;
 800022e:	2300      	movs	r3, #0
 8000230:	737b      	strb	r3, [r7, #13]
	SPI2_Handle.SPI_Config.SPI_SSM = SPI_SSM_SW_DI;
 8000232:	2300      	movs	r3, #0
 8000234:	73bb      	strb	r3, [r7, #14]
	SPI2_Handle.SPI_Config.SPI_Device_Mode = SPI_DEVICE_MODE_M;
 8000236:	2301      	movs	r3, #1
 8000238:	723b      	strb	r3, [r7, #8]

	SPI_Init(&SPI2_Handle);
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fb1f 	bl	8000880 <SPI_Init>
}
 8000242:	bf00      	nop
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40003800 	.word	0x40003800

08000250 <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0

	GPIOx_Handle_t GPIO_BUTTON;
	memset(&GPIO_BUTTON,0,sizeof(GPIO_BUTTON));
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	220c      	movs	r2, #12
 800025a:	2100      	movs	r1, #0
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fbe0 	bl	8000a22 <memset>

	GPIO_BUTTON.pGPIOx = GPIOC;
 8000262:	4b09      	ldr	r3, [pc, #36]	@ (8000288 <GPIO_Button_Init+0x38>)
 8000264:	607b      	str	r3, [r7, #4]
	GPIO_BUTTON.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_13;
 8000266:	230d      	movs	r3, #13
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_BUTTON.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_IT_FT;
 800026a:	2304      	movs	r3, #4
 800026c:	727b      	strb	r3, [r7, #9]
	GPIO_BUTTON.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
 800026e:	2303      	movs	r3, #3
 8000270:	72bb      	strb	r3, [r7, #10]
	GPIO_BUTTON.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;
 8000272:	2300      	movs	r3, #0
 8000274:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GPIO_BUTTON);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f891 	bl	80003a0 <GPIO_Init>

}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	48000800 	.word	0x48000800

0800028c <delay>:

void delay(void) {
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0

	for(uint32_t i = 0; i< 125000; i++);
 8000292:	2300      	movs	r3, #0
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	e002      	b.n	800029e <delay+0x12>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3301      	adds	r3, #1
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a04      	ldr	r2, [pc, #16]	@ (80002b4 <delay+0x28>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d9f8      	bls.n	8000298 <delay+0xc>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	0001e847 	.word	0x0001e847

080002b8 <main>:

int main(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0

	char data[] = "Hello World";
 80002be:	4a21      	ldr	r2, [pc, #132]	@ (8000344 <main+0x8c>)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_Button_Init();
 80002c8:	f7ff ffc2 	bl	8000250 <GPIO_Button_Init>

	// This is spi test to send_data "Hello World"
	SPI2_GPIO_Init();
 80002cc:	f7ff ff7a 	bl	80001c4 <SPI2_GPIO_Init>

	SPI2_Init();
 80002d0:	f7ff ffa0 	bl	8000214 <SPI2_Init>

	// To resolve MODF error - NSS signal high internally
	//SPI_SSI_Config(SPI2, ENABLE);

	SPI_SSOE_Config(SPI2, ENABLE);
 80002d4:	2101      	movs	r1, #1
 80002d6:	481c      	ldr	r0, [pc, #112]	@ (8000348 <main+0x90>)
 80002d8:	f000 fb88 	bl	80009ec <SPI_SSOE_Config>
	while(1) {
		// wait button is pressed
		while(!(GPIO_Read_In_Pin(GPIOA, GPIO_PIN_13)));
 80002dc:	bf00      	nop
 80002de:	210d      	movs	r1, #13
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e4:	f000 fa76 	bl	80007d4 <GPIO_Read_In_Pin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f7      	beq.n	80002de <main+0x26>

		delay();
 80002ee:	f7ff ffcd 	bl	800028c <delay>
		// Enable SPI2 peripheral
		SPI_Peri_CTRL(SPI2, ENABLE);
 80002f2:	2101      	movs	r1, #1
 80002f4:	4814      	ldr	r0, [pc, #80]	@ (8000348 <main+0x90>)
 80002f6:	f000 fb5e 	bl	80009b6 <SPI_Peri_CTRL>

		// Send length of information
		uint8_t data_len = strlen(data);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff59 	bl	80001b4 <strlen>
 8000302:	4603      	mov	r3, r0
 8000304:	b2db      	uxtb	r3, r3
 8000306:	70fb      	strb	r3, [r7, #3]
		SPI_Transmit_Data(SPI2, &data_len, 1);
 8000308:	1cfb      	adds	r3, r7, #3
 800030a:	2201      	movs	r2, #1
 800030c:	4619      	mov	r1, r3
 800030e:	480e      	ldr	r0, [pc, #56]	@ (8000348 <main+0x90>)
 8000310:	f000 fb1a 	bl	8000948 <SPI_Transmit_Data>

		// Send data
		SPI_Transmit_Data(SPI2, (uint8_t*) data, strlen(data));
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff4c 	bl	80001b4 <strlen>
 800031c:	4602      	mov	r2, r0
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4619      	mov	r1, r3
 8000322:	4809      	ldr	r0, [pc, #36]	@ (8000348 <main+0x90>)
 8000324:	f000 fb10 	bl	8000948 <SPI_Transmit_Data>

		// check SPI is busy
		while(SPI_Get_Flag_Status(SPI2, SPI_BUSY_FLAG));
 8000328:	bf00      	nop
 800032a:	2180      	movs	r1, #128	@ 0x80
 800032c:	4806      	ldr	r0, [pc, #24]	@ (8000348 <main+0x90>)
 800032e:	f000 faf8 	bl	8000922 <SPI_Get_Flag_Status>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f8      	bne.n	800032a <main+0x72>

		// Disable SPI2 peripheral
		SPI_Peri_CTRL(SPI2, DISABLE);
 8000338:	2100      	movs	r1, #0
 800033a:	4803      	ldr	r0, [pc, #12]	@ (8000348 <main+0x90>)
 800033c:	f000 fb3b 	bl	80009b6 <SPI_Peri_CTRL>
	while(1) {
 8000340:	e7cc      	b.n	80002dc <main+0x24>
 8000342:	bf00      	nop
 8000344:	08000a94 	.word	0x08000a94
 8000348:	40003800 	.word	0x40003800

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	@ (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	@ (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 fb5b 	bl	8000a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff9b 	bl	80002b8 <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	08000ab0 	.word	0x08000ab0
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	2000001c 	.word	0x2000001c

0800039c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC1_2_IRQHandler>
	...

080003a0 <GPIO_Init>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]

	// enable the peripheral clk
	GPIO_PCLK_CTRL(pGPIOHandle->pGPIOx, ENABLE);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2101      	movs	r1, #1
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f98a 	bl	80006c8 <GPIO_PCLK_CTRL>

	// 1. configure the mode of GPIO pin
	uint32_t temp = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode <= GPIO_MODE_ANALOG) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	795b      	ldrb	r3, [r3, #5]
 80003bc:	2b03      	cmp	r3, #3
 80003be:	d820      	bhi.n	8000402 <GPIO_Init+0x62>
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	461a      	mov	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	791b      	ldrb	r3, [r3, #4]
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number)); // clearing
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	791b      	ldrb	r3, [r3, #4]
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	2103      	movs	r1, #3
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	43db      	mvns	r3, r3
 80003e6:	4619      	mov	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	400a      	ands	r2, r1
 80003ee:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	6819      	ldr	r1, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	430a      	orrs	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	e09a      	b.n	8000538 <GPIO_Init+0x198>

	} else {

		// 1.1 configure interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_IT_FT) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	795b      	ldrb	r3, [r3, #5]
 8000406:	2b04      	cmp	r3, #4
 8000408:	d117      	bne.n	800043a <GPIO_Init+0x9a>
			// falling edge
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 800040a:	4b97      	ldr	r3, [pc, #604]	@ (8000668 <GPIO_Init+0x2c8>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7912      	ldrb	r2, [r2, #4]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	4611      	mov	r1, r2
 800041a:	4a93      	ldr	r2, [pc, #588]	@ (8000668 <GPIO_Init+0x2c8>)
 800041c:	430b      	orrs	r3, r1
 800041e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 8000420:	4b91      	ldr	r3, [pc, #580]	@ (8000668 <GPIO_Init+0x2c8>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	43d2      	mvns	r2, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a8d      	ldr	r2, [pc, #564]	@ (8000668 <GPIO_Init+0x2c8>)
 8000434:	400b      	ands	r3, r1
 8000436:	6093      	str	r3, [r2, #8]
 8000438:	e035      	b.n	80004a6 <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_IT_RT) {
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	795b      	ldrb	r3, [r3, #5]
 800043e:	2b05      	cmp	r3, #5
 8000440:	d117      	bne.n	8000472 <GPIO_Init+0xd2>
			// rising edge
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 8000442:	4b89      	ldr	r3, [pc, #548]	@ (8000668 <GPIO_Init+0x2c8>)
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	43d2      	mvns	r2, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a84      	ldr	r2, [pc, #528]	@ (8000668 <GPIO_Init+0x2c8>)
 8000456:	400b      	ands	r3, r1
 8000458:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 800045a:	4b83      	ldr	r3, [pc, #524]	@ (8000668 <GPIO_Init+0x2c8>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	7912      	ldrb	r2, [r2, #4]
 8000462:	4611      	mov	r1, r2
 8000464:	2201      	movs	r2, #1
 8000466:	408a      	lsls	r2, r1
 8000468:	4611      	mov	r1, r2
 800046a:	4a7f      	ldr	r2, [pc, #508]	@ (8000668 <GPIO_Init+0x2c8>)
 800046c:	430b      	orrs	r3, r1
 800046e:	6093      	str	r3, [r2, #8]
 8000470:	e019      	b.n	80004a6 <GPIO_Init+0x106>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_IT_RFT) {
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	795b      	ldrb	r3, [r3, #5]
 8000476:	2b06      	cmp	r3, #6
 8000478:	d115      	bne.n	80004a6 <GPIO_Init+0x106>
			// both falling and rising edge
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 800047a:	4b7b      	ldr	r3, [pc, #492]	@ (8000668 <GPIO_Init+0x2c8>)
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	7912      	ldrb	r2, [r2, #4]
 8000482:	4611      	mov	r1, r2
 8000484:	2201      	movs	r2, #1
 8000486:	408a      	lsls	r2, r1
 8000488:	4611      	mov	r1, r2
 800048a:	4a77      	ldr	r2, [pc, #476]	@ (8000668 <GPIO_Init+0x2c8>)
 800048c:	430b      	orrs	r3, r1
 800048e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 8000490:	4b75      	ldr	r3, [pc, #468]	@ (8000668 <GPIO_Init+0x2c8>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	4a71      	ldr	r2, [pc, #452]	@ (8000668 <GPIO_Init+0x2c8>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6093      	str	r3, [r2, #8]
		}

		// 1.2 configure the GPIO port selection in SYSCFG
		uint8_t temp_1 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) / 4;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	74fb      	strb	r3, [r7, #19]
		uint8_t temp_2 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) % 4;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	f003 0303 	and.w	r3, r3, #3
 80004b6:	74bb      	strb	r3, [r7, #18]
		uint8_t port = GPIO_BASE_ADDR_TO_PORT(pGPIOHandle->pGPIOx);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004c0:	d01d      	beq.n	80004fe <GPIO_Init+0x15e>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a69      	ldr	r2, [pc, #420]	@ (800066c <GPIO_Init+0x2cc>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d016      	beq.n	80004fa <GPIO_Init+0x15a>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a67      	ldr	r2, [pc, #412]	@ (8000670 <GPIO_Init+0x2d0>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d00f      	beq.n	80004f6 <GPIO_Init+0x156>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a66      	ldr	r2, [pc, #408]	@ (8000674 <GPIO_Init+0x2d4>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d008      	beq.n	80004f2 <GPIO_Init+0x152>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a64      	ldr	r2, [pc, #400]	@ (8000678 <GPIO_Init+0x2d8>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d101      	bne.n	80004ee <GPIO_Init+0x14e>
 80004ea:	2304      	movs	r3, #4
 80004ec:	e008      	b.n	8000500 <GPIO_Init+0x160>
 80004ee:	2300      	movs	r3, #0
 80004f0:	e006      	b.n	8000500 <GPIO_Init+0x160>
 80004f2:	2303      	movs	r3, #3
 80004f4:	e004      	b.n	8000500 <GPIO_Init+0x160>
 80004f6:	2302      	movs	r3, #2
 80004f8:	e002      	b.n	8000500 <GPIO_Init+0x160>
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <GPIO_Init+0x160>
 80004fe:	2300      	movs	r3, #0
 8000500:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000502:	4b5e      	ldr	r3, [pc, #376]	@ (800067c <GPIO_Init+0x2dc>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a5d      	ldr	r2, [pc, #372]	@ (800067c <GPIO_Init+0x2dc>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp_1] = port << (temp_2 * 4);
 800050e:	7c7a      	ldrb	r2, [r7, #17]
 8000510:	7cbb      	ldrb	r3, [r7, #18]
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	fa02 f103 	lsl.w	r1, r2, r3
 8000518:	4a59      	ldr	r2, [pc, #356]	@ (8000680 <GPIO_Init+0x2e0>)
 800051a:	7cfb      	ldrb	r3, [r7, #19]
 800051c:	3302      	adds	r3, #2
 800051e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 1.3 enable the EXTI interrupt delivery using IMR
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 8000522:	4b51      	ldr	r3, [pc, #324]	@ (8000668 <GPIO_Init+0x2c8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	7912      	ldrb	r2, [r2, #4]
 800052a:	4611      	mov	r1, r2
 800052c:	2201      	movs	r2, #1
 800052e:	408a      	lsls	r2, r1
 8000530:	4611      	mov	r1, r2
 8000532:	4a4d      	ldr	r2, [pc, #308]	@ (8000668 <GPIO_Init+0x2c8>)
 8000534:	430b      	orrs	r3, r1
 8000536:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Speed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	799b      	ldrb	r3, [r3, #6]
 8000540:	461a      	mov	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2103      	movs	r1, #3
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	400a      	ands	r2, r1
 800056a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6899      	ldr	r1, [r3, #8]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	697a      	ldr	r2, [r7, #20]
 8000578:	430a      	orrs	r2, r1
 800057a:	609a      	str	r2, [r3, #8]

	// 3. configure pull up / down setting
	temp = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_PuPd << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	79db      	ldrb	r3, [r3, #7]
 8000584:	461a      	mov	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	68da      	ldr	r2, [r3, #12]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	2103      	movs	r1, #3
 80005a0:	fa01 f303 	lsl.w	r3, r1, r3
 80005a4:	43db      	mvns	r3, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	400a      	ands	r2, r1
 80005ae:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	68d9      	ldr	r1, [r3, #12]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	697a      	ldr	r2, [r7, #20]
 80005bc:	430a      	orrs	r2, r1
 80005be:	60da      	str	r2, [r3, #12]


	// 4. configure the output type
	temp = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_OPType << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7a1b      	ldrb	r3, [r3, #8]
 80005c8:	461a      	mov	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	4619      	mov	r1, r3
 80005e0:	2301      	movs	r3, #1
 80005e2:	408b      	lsls	r3, r1
 80005e4:	43db      	mvns	r3, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	400a      	ands	r2, r1
 80005ee:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6859      	ldr	r1, [r3, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	430a      	orrs	r2, r1
 80005fe:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	temp = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_ALT) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d159      	bne.n	80006c0 <GPIO_Init+0x320>

		uint8_t temp1, temp2 = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	743b      	strb	r3, [r7, #16]

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) / 8;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	73fb      	strb	r3, [r7, #15]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) % 8;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	f003 0307 	and.w	r3, r3, #7
 8000620:	743b      	strb	r3, [r7, #16]

		if (temp1) {
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d02d      	beq.n	8000684 <GPIO_Init+0x2e4>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7a5b      	ldrb	r3, [r3, #9]
 800062c:	461a      	mov	r2, r3
 800062e:	7c3b      	ldrb	r3, [r7, #16]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * temp2));
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800063e:	7c3b      	ldrb	r3, [r7, #16]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	210f      	movs	r1, #15
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	400a      	ands	r2, r1
 8000652:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	430a      	orrs	r2, r1
 8000662:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
			pGPIOHandle->pGPIOx->AFRL |= temp;
		}
	}

}
 8000664:	e02c      	b.n	80006c0 <GPIO_Init+0x320>
 8000666:	bf00      	nop
 8000668:	40010400 	.word	0x40010400
 800066c:	48000400 	.word	0x48000400
 8000670:	48000800 	.word	0x48000800
 8000674:	48000c00 	.word	0x48000c00
 8000678:	48001400 	.word	0x48001400
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7a5b      	ldrb	r3, [r3, #9]
 8000688:	461a      	mov	r2, r3
 800068a:	7c3b      	ldrb	r3, [r7, #16]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a1a      	ldr	r2, [r3, #32]
 800069a:	7c3b      	ldrb	r3, [r7, #16]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	210f      	movs	r1, #15
 80006a0:	fa01 f303 	lsl.w	r3, r1, r3
 80006a4:	43db      	mvns	r3, r3
 80006a6:	4619      	mov	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	400a      	ands	r2, r1
 80006ae:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6a19      	ldr	r1, [r3, #32]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	430a      	orrs	r2, r1
 80006be:	621a      	str	r2, [r3, #32]
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <GPIO_PCLK_CTRL>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_PCLK_CTRL(GPIO_REG_t *pGPIOx, uint8_t EnDi){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]

	if (EnDi == ENABLE) {
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d136      	bne.n	8000748 <GPIO_PCLK_CTRL+0x80>
		if (pGPIOx == GPIOA) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80006e0:	d106      	bne.n	80006f0 <GPIO_PCLK_CTRL+0x28>
			GPIOA_PCLK_EN();
 80006e2:	4b37      	ldr	r3, [pc, #220]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a36      	ldr	r2, [pc, #216]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ec:	6153      	str	r3, [r2, #20]
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 80006ee:	e061      	b.n	80007b4 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a34      	ldr	r2, [pc, #208]	@ (80007c4 <GPIO_PCLK_CTRL+0xfc>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <GPIO_PCLK_CTRL+0x3e>
			GPIOB_PCLK_EN();
 80006f8:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	4a30      	ldr	r2, [pc, #192]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 80006fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000702:	6153      	str	r3, [r2, #20]
}
 8000704:	e056      	b.n	80007b4 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a2f      	ldr	r2, [pc, #188]	@ (80007c8 <GPIO_PCLK_CTRL+0x100>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <GPIO_PCLK_CTRL+0x54>
			GPIOC_PCLK_EN();
 800070e:	4b2c      	ldr	r3, [pc, #176]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000714:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000718:	6153      	str	r3, [r2, #20]
}
 800071a:	e04b      	b.n	80007b4 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a2b      	ldr	r2, [pc, #172]	@ (80007cc <GPIO_PCLK_CTRL+0x104>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d106      	bne.n	8000732 <GPIO_PCLK_CTRL+0x6a>
			GPIOD_PCLK_EN();
 8000724:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a25      	ldr	r2, [pc, #148]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 800072a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800072e:	6153      	str	r3, [r2, #20]
}
 8000730:	e040      	b.n	80007b4 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a26      	ldr	r2, [pc, #152]	@ (80007d0 <GPIO_PCLK_CTRL+0x108>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d13c      	bne.n	80007b4 <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_EN();
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000740:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000744:	6153      	str	r3, [r2, #20]
}
 8000746:	e035      	b.n	80007b4 <GPIO_PCLK_CTRL+0xec>
		if (pGPIOx == GPIOA) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800074e:	d106      	bne.n	800075e <GPIO_PCLK_CTRL+0x96>
			GPIOA_PCLK_DI();
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4a1a      	ldr	r2, [pc, #104]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000756:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800075a:	6153      	str	r3, [r2, #20]
}
 800075c:	e02a      	b.n	80007b4 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <GPIO_PCLK_CTRL+0xfc>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d106      	bne.n	8000774 <GPIO_PCLK_CTRL+0xac>
			GPIOB_PCLK_DI();
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 800076c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000770:	6153      	str	r3, [r2, #20]
}
 8000772:	e01f      	b.n	80007b4 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <GPIO_PCLK_CTRL+0x100>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d106      	bne.n	800078a <GPIO_PCLK_CTRL+0xc2>
			GPIOC_PCLK_DI();
 800077c:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000782:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000786:	6153      	str	r3, [r2, #20]
}
 8000788:	e014      	b.n	80007b4 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a0f      	ldr	r2, [pc, #60]	@ (80007cc <GPIO_PCLK_CTRL+0x104>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d106      	bne.n	80007a0 <GPIO_PCLK_CTRL+0xd8>
			GPIOD_PCLK_DI();
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a0a      	ldr	r2, [pc, #40]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 8000798:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800079c:	6153      	str	r3, [r2, #20]
}
 800079e:	e009      	b.n	80007b4 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a0b      	ldr	r2, [pc, #44]	@ (80007d0 <GPIO_PCLK_CTRL+0x108>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d105      	bne.n	80007b4 <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_DI();
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <GPIO_PCLK_CTRL+0xf8>)
 80007ae:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80007b2:	6153      	str	r3, [r2, #20]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	48000400 	.word	0x48000400
 80007c8:	48000800 	.word	0x48000800
 80007cc:	48000c00 	.word	0x48000c00
 80007d0:	48001400 	.word	0x48001400

080007d4 <GPIO_Read_In_Pin>:
 *
 * Return			: GPIO pin value
 *
 * Note				: N/A
 */
uint8_t GPIO_Read_In_Pin(GPIO_REG_t *pGPIOx, uint8_t PinNumber){
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & ~(0xFE)); // 0x00000001
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	691a      	ldr	r2, [r3, #16]
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	fa22 f303 	lsr.w	r3, r2, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]

	return value;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
	...

08000800 <SPI_PCLK_CTRL>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void SPI_PCLK_CTRL(SPI_REG_t *pSPIx, uint8_t EnDi) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]

	if (EnDi == ENABLE) {
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d115      	bne.n	800083e <SPI_PCLK_CTRL+0x3e>
		if (pSPIx == SPI2) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a17      	ldr	r2, [pc, #92]	@ (8000874 <SPI_PCLK_CTRL+0x74>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <SPI_PCLK_CTRL+0x28>
			SPI2_PCLK_EN();
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <SPI_PCLK_CTRL+0x78>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a16      	ldr	r2, [pc, #88]	@ (8000878 <SPI_PCLK_CTRL+0x78>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000824:	61d3      	str	r3, [r2, #28]
		} else if (pSPIx == SPI3) {
			SPI3_PCLK_DI();
		}
	}

}
 8000826:	e01f      	b.n	8000868 <SPI_PCLK_CTRL+0x68>
		} else if (pSPIx == SPI3) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a14      	ldr	r2, [pc, #80]	@ (800087c <SPI_PCLK_CTRL+0x7c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d11b      	bne.n	8000868 <SPI_PCLK_CTRL+0x68>
			SPI3_PCLK_EN();
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <SPI_PCLK_CTRL+0x78>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <SPI_PCLK_CTRL+0x78>)
 8000836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800083a:	61d3      	str	r3, [r2, #28]
}
 800083c:	e014      	b.n	8000868 <SPI_PCLK_CTRL+0x68>
		if (pSPIx == SPI2) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <SPI_PCLK_CTRL+0x74>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <SPI_PCLK_CTRL+0x54>
			SPI2_PCLK_DI();
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <SPI_PCLK_CTRL+0x78>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <SPI_PCLK_CTRL+0x78>)
 800084c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000850:	61d3      	str	r3, [r2, #28]
}
 8000852:	e009      	b.n	8000868 <SPI_PCLK_CTRL+0x68>
		} else if (pSPIx == SPI3) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a09      	ldr	r2, [pc, #36]	@ (800087c <SPI_PCLK_CTRL+0x7c>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d105      	bne.n	8000868 <SPI_PCLK_CTRL+0x68>
			SPI3_PCLK_DI();
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <SPI_PCLK_CTRL+0x78>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <SPI_PCLK_CTRL+0x78>)
 8000862:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000866:	61d3      	str	r3, [r2, #28]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40003800 	.word	0x40003800
 8000878:	40021000 	.word	0x40021000
 800087c:	40003c00 	.word	0x40003c00

08000880 <SPI_Init>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void SPI_Init(SPIx_Handle_t *pSPIHandle) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

	// peripheral clk enable
	SPI_PCLK_CTRL(pSPIHandle->pSPIx, ENABLE);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffb6 	bl	8000800 <SPI_PCLK_CTRL>

	// configure the SPI_CR1 register
	uint32_t temp = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]

	// 1. Configure the device mode
	temp |= pSPIHandle->SPI_Config.SPI_Device_Mode << 2;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

	// 2. Configure the bus
	if (pSPIHandle->SPI_Config.SPI_Bus_Config == SPI_BUS_FULL_DUPLEX) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	795b      	ldrb	r3, [r3, #5]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d104      	bne.n	80008b6 <SPI_Init+0x36>
		// Full Duplex mode
		temp &= ~(1 << SPI_CR1_BIDI_MODE);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e00b      	b.n	80008ce <SPI_Init+0x4e>
	} else if (pSPIHandle->SPI_Config.SPI_Bus_Config == SPI_BUS_SIMPLEX_RX_ONLY) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d107      	bne.n	80008ce <SPI_Init+0x4e>
		// Simple receive only
		temp &= ~(1 << SPI_CR1_BIDI_MODE);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008c4:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RX_ONLY);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008cc:	60fb      	str	r3, [r7, #12]
	else if (pSPIHandle->SPI_Config.SPI_Bus_Config == SPI_BUS_SIMPLEX_TX_ONLY) {
		// Simple transmit only
	}

	// 3. Configure the clock speed
	temp |= pSPIHandle->SPI_Config.SPI_SCLK_Speed << SPI_CR1_BR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	799b      	ldrb	r3, [r3, #6]
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]

	// 4. Configure the CRCL
	temp |= pSPIHandle->SPI_Config.SPI_CRCL << SPI_CR1_CRCL;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	79db      	ldrb	r3, [r3, #7]
 80008de:	02db      	lsls	r3, r3, #11
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]

	// 5. Configure the CPOL
	temp |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7a1b      	ldrb	r3, [r3, #8]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]

	// 6. Configure the CPHA
	temp |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7a5b      	ldrb	r3, [r3, #9]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]

	// 7. Configure the SSM
	temp |= pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7a9b      	ldrb	r3, [r3, #10]
 8000902:	025b      	lsls	r3, r3, #9
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	4313      	orrs	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6819      	ldr	r1, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <SPI_Get_Flag_Status>:
	}

}


uint8_t SPI_Get_Flag_Status(SPI_REG_t *pSPIx, uint32_t Flag_name) {
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]

	if (pSPIx->SR & Flag_name) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	4013      	ands	r3, r2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SPI_Get_Flag_Status+0x1a>
		return FLAG_SET;
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <SPI_Get_Flag_Status+0x1c>
	}

	return FLAG_RESET;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <SPI_Transmit_Data>:
 *
 * Return			: None
 *
 * Note				: Blocking call
 */
void SPI_Transmit_Data(SPI_REG_t *pSPIx, uint8_t *pTx_Buffer, uint32_t Len) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]

	while (Len > 0) {
 8000954:	e027      	b.n	80009a6 <SPI_Transmit_Data+0x5e>

		// 1. wait until TXE set
		while(SPI_Get_Flag_Status(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000956:	bf00      	nop
 8000958:	2102      	movs	r1, #2
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f7ff ffe1 	bl	8000922 <SPI_Get_Flag_Status>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f8      	beq.n	8000958 <SPI_Transmit_Data+0x10>

		// 2. check the DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_CRCL)) {
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00e      	beq.n	8000990 <SPI_Transmit_Data+0x48>
			// 16 bit
			pSPIx->DR = *((uint16_t*) pTx_Buffer);
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	60da      	str	r2, [r3, #12]
			Len--;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
			Len--;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3b01      	subs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTx_Buffer++;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	3301      	adds	r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	e00a      	b.n	80009a6 <SPI_Transmit_Data+0x5e>
		} else {
			// 8 bit
			pSPIx->DR = *pTx_Buffer;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	60da      	str	r2, [r3, #12]
			Len--;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3b01      	subs	r3, #1
 800099e:	607b      	str	r3, [r7, #4]
			pTx_Buffer++;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
	while (Len > 0) {
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1d4      	bne.n	8000956 <SPI_Transmit_Data+0xe>
		}


	}

}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SPI_Peri_CTRL>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void SPI_Peri_CTRL(SPI_REG_t *pSPIx, uint8_t EnDi) {
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	70fb      	strb	r3, [r7, #3]

	if (EnDi == ENABLE) {
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d106      	bne.n	80009d6 <SPI_Peri_CTRL+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 80009d4:	e005      	b.n	80009e2 <SPI_Peri_CTRL+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <SPI_SSOE_Config>:
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOE_Config(SPI_REG_t *pSPIx, uint8_t EnDi) {
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]

	if (EnDi == ENABLE) {
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d106      	bne.n	8000a0c <SPI_SSOE_Config+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f043 0204 	orr.w	r2, r3, #4
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}

}
 8000a0a:	e005      	b.n	8000a18 <SPI_SSOE_Config+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f023 0204 	bic.w	r2, r3, #4
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	605a      	str	r2, [r3, #4]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <memset>:
 8000a22:	4402      	add	r2, r0
 8000a24:	4603      	mov	r3, r0
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d100      	bne.n	8000a2c <memset+0xa>
 8000a2a:	4770      	bx	lr
 8000a2c:	f803 1b01 	strb.w	r1, [r3], #1
 8000a30:	e7f9      	b.n	8000a26 <memset+0x4>
	...

08000a34 <__libc_init_array>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	4d0d      	ldr	r5, [pc, #52]	@ (8000a6c <__libc_init_array+0x38>)
 8000a38:	4c0d      	ldr	r4, [pc, #52]	@ (8000a70 <__libc_init_array+0x3c>)
 8000a3a:	1b64      	subs	r4, r4, r5
 8000a3c:	10a4      	asrs	r4, r4, #2
 8000a3e:	2600      	movs	r6, #0
 8000a40:	42a6      	cmp	r6, r4
 8000a42:	d109      	bne.n	8000a58 <__libc_init_array+0x24>
 8000a44:	4d0b      	ldr	r5, [pc, #44]	@ (8000a74 <__libc_init_array+0x40>)
 8000a46:	4c0c      	ldr	r4, [pc, #48]	@ (8000a78 <__libc_init_array+0x44>)
 8000a48:	f000 f818 	bl	8000a7c <_init>
 8000a4c:	1b64      	subs	r4, r4, r5
 8000a4e:	10a4      	asrs	r4, r4, #2
 8000a50:	2600      	movs	r6, #0
 8000a52:	42a6      	cmp	r6, r4
 8000a54:	d105      	bne.n	8000a62 <__libc_init_array+0x2e>
 8000a56:	bd70      	pop	{r4, r5, r6, pc}
 8000a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5c:	4798      	blx	r3
 8000a5e:	3601      	adds	r6, #1
 8000a60:	e7ee      	b.n	8000a40 <__libc_init_array+0xc>
 8000a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a66:	4798      	blx	r3
 8000a68:	3601      	adds	r6, #1
 8000a6a:	e7f2      	b.n	8000a52 <__libc_init_array+0x1e>
 8000a6c:	08000aa8 	.word	0x08000aa8
 8000a70:	08000aa8 	.word	0x08000aa8
 8000a74:	08000aa8 	.word	0x08000aa8
 8000a78:	08000aac 	.word	0x08000aac

08000a7c <_init>:
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7e:	bf00      	nop
 8000a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a82:	bc08      	pop	{r3}
 8000a84:	469e      	mov	lr, r3
 8000a86:	4770      	bx	lr

08000a88 <_fini>:
 8000a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8a:	bf00      	nop
 8000a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a8e:	bc08      	pop	{r3}
 8000a90:	469e      	mov	lr, r3
 8000a92:	4770      	bx	lr
