
stm32f302x8_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000174  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007dc  08000174  08000174  00001174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000950  08000958  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000950  08000950  00001958  2**0
                  CONTENTS
  4 .ARM          00000000  08000950  08000950  00001958  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000950  08000958  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000950  08000950  00001950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000954  08000954  00001954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000958  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000958  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009af  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002a1  00000000  00000000  00002331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  000025d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000099  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002178  00000000  00000000  00002739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000010b8  00000000  00000000  000048b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008595  00000000  00000000  00005969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000defe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0000df44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0000e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000174 <__do_global_dtors_aux>:
 8000174:	b510      	push	{r4, lr}
 8000176:	4c05      	ldr	r4, [pc, #20]	@ (800018c <__do_global_dtors_aux+0x18>)
 8000178:	7823      	ldrb	r3, [r4, #0]
 800017a:	b933      	cbnz	r3, 800018a <__do_global_dtors_aux+0x16>
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <__do_global_dtors_aux+0x1c>)
 800017e:	b113      	cbz	r3, 8000186 <__do_global_dtors_aux+0x12>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x20>)
 8000182:	f3af 8000 	nop.w
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	20000000 	.word	0x20000000
 8000190:	00000000 	.word	0x00000000
 8000194:	08000938 	.word	0x08000938

08000198 <frame_dummy>:
 8000198:	b508      	push	{r3, lr}
 800019a:	4b03      	ldr	r3, [pc, #12]	@ (80001a8 <frame_dummy+0x10>)
 800019c:	b11b      	cbz	r3, 80001a6 <frame_dummy+0xe>
 800019e:	4903      	ldr	r1, [pc, #12]	@ (80001ac <frame_dummy+0x14>)
 80001a0:	4803      	ldr	r0, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	bd08      	pop	{r3, pc}
 80001a8:	00000000 	.word	0x00000000
 80001ac:	20000004 	.word	0x20000004
 80001b0:	08000938 	.word	0x08000938

080001b4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b08a      	sub	sp, #40	@ 0x28
 80001b8:	af00      	add	r7, sp, #0

	// LED test

	GPIOx_Handle_t GPIO_LED, GPIO_LED2, GPIO_BUTTON;
	memset(&GPIO_LED,0,sizeof(GPIO_LED));
 80001ba:	f107 031c 	add.w	r3, r7, #28
 80001be:	220c      	movs	r2, #12
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fb8c 	bl	80008e0 <memset>
	memset(&GPIO_LED2,0,sizeof(GPIO_LED2));
 80001c8:	f107 0310 	add.w	r3, r7, #16
 80001cc:	220c      	movs	r2, #12
 80001ce:	2100      	movs	r1, #0
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fb85 	bl	80008e0 <memset>
	memset(&GPIO_BUTTON,0,sizeof(GPIO_BUTTON));
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	220c      	movs	r2, #12
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fb7f 	bl	80008e0 <memset>

	GPIO_LED.pGPIOx = GPIOB; //GPIOA;
 80001e2:	4b25      	ldr	r3, [pc, #148]	@ (8000278 <main+0xc4>)
 80001e4:	61fb      	str	r3, [r7, #28]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_13; //GPIO_PIN_5;
 80001e6:	230d      	movs	r3, #13
 80001e8:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_OUT;
 80001ec:	2301      	movs	r3, #1
 80001ee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
 80001f2:	2303      	movs	r3, #3
 80001f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_OPType = GPIO_OP_TYPE_PP; // GPIO_OP_TYPE_OD;
 80001f8:	2300      	movs	r3, #0
 80001fa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;; //GPIO_PIN_PU;
 80001fe:	2300      	movs	r3, #0
 8000200:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23


	GPIO_LED2.pGPIOx = GPIOB; //GPIOB;
 8000204:	4b1c      	ldr	r3, [pc, #112]	@ (8000278 <main+0xc4>)
 8000206:	613b      	str	r3, [r7, #16]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_14; //GPIO_PIN_14;
 8000208:	230e      	movs	r3, #14
 800020a:	753b      	strb	r3, [r7, #20]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_OUT;
 800020c:	2301      	movs	r3, #1
 800020e:	757b      	strb	r3, [r7, #21]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
 8000210:	2303      	movs	r3, #3
 8000212:	75bb      	strb	r3, [r7, #22]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_OPType = GPIO_OP_TYPE_PP;
 8000214:	2300      	movs	r3, #0
 8000216:	763b      	strb	r3, [r7, #24]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]

	GPIO_BUTTON.pGPIOx = GPIOC;
 800021c:	4b17      	ldr	r3, [pc, #92]	@ (800027c <main+0xc8>)
 800021e:	607b      	str	r3, [r7, #4]
	GPIO_BUTTON.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_13;
 8000220:	230d      	movs	r3, #13
 8000222:	723b      	strb	r3, [r7, #8]
	GPIO_BUTTON.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_IT_FT;
 8000224:	2304      	movs	r3, #4
 8000226:	727b      	strb	r3, [r7, #9]
	GPIO_BUTTON.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
 8000228:	2303      	movs	r3, #3
 800022a:	72bb      	strb	r3, [r7, #10]
	GPIO_BUTTON.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;
 800022c:	2300      	movs	r3, #0
 800022e:	72fb      	strb	r3, [r7, #11]

	GPIO_PCLK_CTRL(GPIOB, ENABLE);
 8000230:	2101      	movs	r1, #1
 8000232:	4811      	ldr	r0, [pc, #68]	@ (8000278 <main+0xc4>)
 8000234:	f000 f9f0 	bl	8000618 <GPIO_PCLK_CTRL>
	GPIO_PCLK_CTRL(GPIOC, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	4810      	ldr	r0, [pc, #64]	@ (800027c <main+0xc8>)
 800023c:	f000 f9ec 	bl	8000618 <GPIO_PCLK_CTRL>

	GPIO_Init(&GPIO_LED);
 8000240:	f107 031c 	add.w	r3, r7, #28
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f857 	bl	80002f8 <GPIO_Init>
	GPIO_Init(&GPIO_LED2);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f852 	bl	80002f8 <GPIO_Init>
	GPIO_Init(&GPIO_BUTTON);
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f84e 	bl	80002f8 <GPIO_Init>

	GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_14);
 800025c:	210e      	movs	r1, #14
 800025e:	4806      	ldr	r0, [pc, #24]	@ (8000278 <main+0xc4>)
 8000260:	f000 fa60 	bl	8000724 <GPIO_Toggle_Out_Pin>
	// IRQ configure
	GPIO_IRQ_Priority_Config(IRQ_EXTI15_10, NVIC_IRQ_PRI15);
 8000264:	210f      	movs	r1, #15
 8000266:	2028      	movs	r0, #40	@ 0x28
 8000268:	f000 faf0 	bl	800084c <GPIO_IRQ_Priority_Config>
	GPIO_IRQ_Interrupt_Config(IRQ_EXTI15_10, ENABLE);
 800026c:	2101      	movs	r1, #1
 800026e:	2028      	movs	r0, #40	@ 0x28
 8000270:	f000 fa6c 	bl	800074c <GPIO_IRQ_Interrupt_Config>
		else {
			delay();
			GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_14);
		}
	}*/
	while (1);
 8000274:	bf00      	nop
 8000276:	e7fd      	b.n	8000274 <main+0xc0>
 8000278:	48000400 	.word	0x48000400
 800027c:	48000800 	.word	0x48000800

08000280 <EXTI15_10_IRQHandler>:
}

void EXTI15_10_IRQHandler(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	GPIO_IRQ_Handling(GPIO_PIN_13);
 8000284:	200d      	movs	r0, #13
 8000286:	f000 fb0b 	bl	80008a0 <GPIO_IRQ_Handling>
	GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_13);
 800028a:	210d      	movs	r1, #13
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <EXTI15_10_IRQHandler+0x20>)
 800028e:	f000 fa49 	bl	8000724 <GPIO_Toggle_Out_Pin>
	GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_14);
 8000292:	210e      	movs	r1, #14
 8000294:	4802      	ldr	r0, [pc, #8]	@ (80002a0 <EXTI15_10_IRQHandler+0x20>)
 8000296:	f000 fa45 	bl	8000724 <GPIO_Toggle_Out_Pin>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	48000400 	.word	0x48000400

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	@ (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	@ (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	@ (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	@ (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 fb0d 	bl	80008f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ff6d 	bl	80001b4 <main>

080002da <LoopForever>:

LoopForever:
  b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000958 	.word	0x08000958
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>
	...

080002f8 <GPIO_Init>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle) {
 80002f8:	b480      	push	{r7}
 80002fa:	b087      	sub	sp, #28
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	// 1. configure the mode of GPIO pin

	uint32_t temp = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode <= GPIO_MODE_ANALOG) {
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	795b      	ldrb	r3, [r3, #5]
 8000308:	2b03      	cmp	r3, #3
 800030a:	d820      	bhi.n	800034e <GPIO_Init+0x56>
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	795b      	ldrb	r3, [r3, #5]
 8000310:	461a      	mov	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	fa02 f303 	lsl.w	r3, r2, r3
 800031c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number)); // clearing
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	791b      	ldrb	r3, [r3, #4]
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	400a      	ands	r2, r1
 800033a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	6819      	ldr	r1, [r3, #0]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	697a      	ldr	r2, [r7, #20]
 8000348:	430a      	orrs	r2, r1
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	e09a      	b.n	8000484 <GPIO_Init+0x18c>

	} else {

		// 1.1 configure interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_IT_FT) {
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	795b      	ldrb	r3, [r3, #5]
 8000352:	2b04      	cmp	r3, #4
 8000354:	d117      	bne.n	8000386 <GPIO_Init+0x8e>
			// falling edge
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 8000356:	4b97      	ldr	r3, [pc, #604]	@ (80005b4 <GPIO_Init+0x2bc>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	7912      	ldrb	r2, [r2, #4]
 800035e:	4611      	mov	r1, r2
 8000360:	2201      	movs	r2, #1
 8000362:	408a      	lsls	r2, r1
 8000364:	4611      	mov	r1, r2
 8000366:	4a93      	ldr	r2, [pc, #588]	@ (80005b4 <GPIO_Init+0x2bc>)
 8000368:	430b      	orrs	r3, r1
 800036a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 800036c:	4b91      	ldr	r3, [pc, #580]	@ (80005b4 <GPIO_Init+0x2bc>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	7912      	ldrb	r2, [r2, #4]
 8000374:	4611      	mov	r1, r2
 8000376:	2201      	movs	r2, #1
 8000378:	408a      	lsls	r2, r1
 800037a:	43d2      	mvns	r2, r2
 800037c:	4611      	mov	r1, r2
 800037e:	4a8d      	ldr	r2, [pc, #564]	@ (80005b4 <GPIO_Init+0x2bc>)
 8000380:	400b      	ands	r3, r1
 8000382:	6093      	str	r3, [r2, #8]
 8000384:	e035      	b.n	80003f2 <GPIO_Init+0xfa>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_IT_RT) {
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	795b      	ldrb	r3, [r3, #5]
 800038a:	2b05      	cmp	r3, #5
 800038c:	d117      	bne.n	80003be <GPIO_Init+0xc6>
			// rising edge
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 800038e:	4b89      	ldr	r3, [pc, #548]	@ (80005b4 <GPIO_Init+0x2bc>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	7912      	ldrb	r2, [r2, #4]
 8000396:	4611      	mov	r1, r2
 8000398:	2201      	movs	r2, #1
 800039a:	408a      	lsls	r2, r1
 800039c:	43d2      	mvns	r2, r2
 800039e:	4611      	mov	r1, r2
 80003a0:	4a84      	ldr	r2, [pc, #528]	@ (80005b4 <GPIO_Init+0x2bc>)
 80003a2:	400b      	ands	r3, r1
 80003a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 80003a6:	4b83      	ldr	r3, [pc, #524]	@ (80005b4 <GPIO_Init+0x2bc>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	7912      	ldrb	r2, [r2, #4]
 80003ae:	4611      	mov	r1, r2
 80003b0:	2201      	movs	r2, #1
 80003b2:	408a      	lsls	r2, r1
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a7f      	ldr	r2, [pc, #508]	@ (80005b4 <GPIO_Init+0x2bc>)
 80003b8:	430b      	orrs	r3, r1
 80003ba:	6093      	str	r3, [r2, #8]
 80003bc:	e019      	b.n	80003f2 <GPIO_Init+0xfa>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_IT_RFT) {
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	795b      	ldrb	r3, [r3, #5]
 80003c2:	2b06      	cmp	r3, #6
 80003c4:	d115      	bne.n	80003f2 <GPIO_Init+0xfa>
			// both falling and rising edge
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 80003c6:	4b7b      	ldr	r3, [pc, #492]	@ (80005b4 <GPIO_Init+0x2bc>)
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	7912      	ldrb	r2, [r2, #4]
 80003ce:	4611      	mov	r1, r2
 80003d0:	2201      	movs	r2, #1
 80003d2:	408a      	lsls	r2, r1
 80003d4:	4611      	mov	r1, r2
 80003d6:	4a77      	ldr	r2, [pc, #476]	@ (80005b4 <GPIO_Init+0x2bc>)
 80003d8:	430b      	orrs	r3, r1
 80003da:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 80003dc:	4b75      	ldr	r3, [pc, #468]	@ (80005b4 <GPIO_Init+0x2bc>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	7912      	ldrb	r2, [r2, #4]
 80003e4:	4611      	mov	r1, r2
 80003e6:	2201      	movs	r2, #1
 80003e8:	408a      	lsls	r2, r1
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a71      	ldr	r2, [pc, #452]	@ (80005b4 <GPIO_Init+0x2bc>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	6093      	str	r3, [r2, #8]
		}

		// 1.2 configure the GPIO port selection in SYSCFG
		uint8_t temp_1 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) / 4;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	089b      	lsrs	r3, r3, #2
 80003f8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp_2 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) % 4;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	791b      	ldrb	r3, [r3, #4]
 80003fe:	f003 0303 	and.w	r3, r3, #3
 8000402:	74bb      	strb	r3, [r7, #18]
		uint8_t port = GPIO_BASE_ADDR_TO_PORT(pGPIOHandle->pGPIOx);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800040c:	d01d      	beq.n	800044a <GPIO_Init+0x152>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a69      	ldr	r2, [pc, #420]	@ (80005b8 <GPIO_Init+0x2c0>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d016      	beq.n	8000446 <GPIO_Init+0x14e>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a67      	ldr	r2, [pc, #412]	@ (80005bc <GPIO_Init+0x2c4>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d00f      	beq.n	8000442 <GPIO_Init+0x14a>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a66      	ldr	r2, [pc, #408]	@ (80005c0 <GPIO_Init+0x2c8>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d008      	beq.n	800043e <GPIO_Init+0x146>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a64      	ldr	r2, [pc, #400]	@ (80005c4 <GPIO_Init+0x2cc>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d101      	bne.n	800043a <GPIO_Init+0x142>
 8000436:	2304      	movs	r3, #4
 8000438:	e008      	b.n	800044c <GPIO_Init+0x154>
 800043a:	2300      	movs	r3, #0
 800043c:	e006      	b.n	800044c <GPIO_Init+0x154>
 800043e:	2303      	movs	r3, #3
 8000440:	e004      	b.n	800044c <GPIO_Init+0x154>
 8000442:	2302      	movs	r3, #2
 8000444:	e002      	b.n	800044c <GPIO_Init+0x154>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <GPIO_Init+0x154>
 800044a:	2300      	movs	r3, #0
 800044c:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800044e:	4b5e      	ldr	r3, [pc, #376]	@ (80005c8 <GPIO_Init+0x2d0>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a5d      	ldr	r2, [pc, #372]	@ (80005c8 <GPIO_Init+0x2d0>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp_1] = port << (temp_2 * 4);
 800045a:	7c7a      	ldrb	r2, [r7, #17]
 800045c:	7cbb      	ldrb	r3, [r7, #18]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	fa02 f103 	lsl.w	r1, r2, r3
 8000464:	4a59      	ldr	r2, [pc, #356]	@ (80005cc <GPIO_Init+0x2d4>)
 8000466:	7cfb      	ldrb	r3, [r7, #19]
 8000468:	3302      	adds	r3, #2
 800046a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 1.3 enable the EXTI interrupt delivery using IMR
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number);
 800046e:	4b51      	ldr	r3, [pc, #324]	@ (80005b4 <GPIO_Init+0x2bc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7912      	ldrb	r2, [r2, #4]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	4611      	mov	r1, r2
 800047e:	4a4d      	ldr	r2, [pc, #308]	@ (80005b4 <GPIO_Init+0x2bc>)
 8000480:	430b      	orrs	r3, r1
 8000482:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Speed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	799b      	ldrb	r3, [r3, #6]
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	2103      	movs	r1, #3
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	43db      	mvns	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	400a      	ands	r2, r1
 80004b6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	6899      	ldr	r1, [r3, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	697a      	ldr	r2, [r7, #20]
 80004c4:	430a      	orrs	r2, r1
 80004c6:	609a      	str	r2, [r3, #8]

	// 3. configure pull up / down setting
	temp = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_PuPd << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	79db      	ldrb	r3, [r3, #7]
 80004d0:	461a      	mov	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	2103      	movs	r1, #3
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	43db      	mvns	r3, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	400a      	ands	r2, r1
 80004fa:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	68d9      	ldr	r1, [r3, #12]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	697a      	ldr	r2, [r7, #20]
 8000508:	430a      	orrs	r2, r1
 800050a:	60da      	str	r2, [r3, #12]


	// 4. configure the output type
	temp = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_OPType << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	7a1b      	ldrb	r3, [r3, #8]
 8000514:	461a      	mov	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	685a      	ldr	r2, [r3, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	791b      	ldrb	r3, [r3, #4]
 800052a:	4619      	mov	r1, r3
 800052c:	2301      	movs	r3, #1
 800052e:	408b      	lsls	r3, r1
 8000530:	43db      	mvns	r3, r3
 8000532:	4619      	mov	r1, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	400a      	ands	r2, r1
 800053a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	6859      	ldr	r1, [r3, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	430a      	orrs	r2, r1
 800054a:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	temp = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_ALT) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d159      	bne.n	800060c <GPIO_Init+0x314>

		uint8_t temp1, temp2 = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	743b      	strb	r3, [r7, #16]

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) / 8;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	08db      	lsrs	r3, r3, #3
 8000562:	73fb      	strb	r3, [r7, #15]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) % 8;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	f003 0307 	and.w	r3, r3, #7
 800056c:	743b      	strb	r3, [r7, #16]

		if (temp1) {
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d02d      	beq.n	80005d0 <GPIO_Init+0x2d8>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7a5b      	ldrb	r3, [r3, #9]
 8000578:	461a      	mov	r2, r3
 800057a:	7c3b      	ldrb	r3, [r7, #16]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * temp2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800058a:	7c3b      	ldrb	r3, [r7, #16]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	210f      	movs	r1, #15
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	4619      	mov	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	400a      	ands	r2, r1
 800059e:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	697a      	ldr	r2, [r7, #20]
 80005ac:	430a      	orrs	r2, r1
 80005ae:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
			pGPIOHandle->pGPIOx->AFRL |= temp;
		}
	}

}
 80005b0:	e02c      	b.n	800060c <GPIO_Init+0x314>
 80005b2:	bf00      	nop
 80005b4:	40010400 	.word	0x40010400
 80005b8:	48000400 	.word	0x48000400
 80005bc:	48000800 	.word	0x48000800
 80005c0:	48000c00 	.word	0x48000c00
 80005c4:	48001400 	.word	0x48001400
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010000 	.word	0x40010000
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7a5b      	ldrb	r3, [r3, #9]
 80005d4:	461a      	mov	r2, r3
 80005d6:	7c3b      	ldrb	r3, [r7, #16]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6a1a      	ldr	r2, [r3, #32]
 80005e6:	7c3b      	ldrb	r3, [r7, #16]
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	210f      	movs	r1, #15
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	400a      	ands	r2, r1
 80005fa:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6a19      	ldr	r1, [r3, #32]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	430a      	orrs	r2, r1
 800060a:	621a      	str	r2, [r3, #32]
}
 800060c:	bf00      	nop
 800060e:	371c      	adds	r7, #28
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <GPIO_PCLK_CTRL>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_PCLK_CTRL(GPIO_REG_t *pGPIOx, uint8_t EnDi){
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]


	if (EnDi == ENABLE) {
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d136      	bne.n	8000698 <GPIO_PCLK_CTRL+0x80>
		if (pGPIOx == GPIOA) {
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000630:	d106      	bne.n	8000640 <GPIO_PCLK_CTRL+0x28>
			GPIOA_PCLK_EN();
 8000632:	4b37      	ldr	r3, [pc, #220]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a36      	ldr	r2, [pc, #216]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	6153      	str	r3, [r2, #20]
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 800063e:	e061      	b.n	8000704 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <GPIO_PCLK_CTRL+0xfc>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d106      	bne.n	8000656 <GPIO_PCLK_CTRL+0x3e>
			GPIOB_PCLK_EN();
 8000648:	4b31      	ldr	r3, [pc, #196]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a30      	ldr	r2, [pc, #192]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 800064e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000652:	6153      	str	r3, [r2, #20]
}
 8000654:	e056      	b.n	8000704 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <GPIO_PCLK_CTRL+0x100>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d106      	bne.n	800066c <GPIO_PCLK_CTRL+0x54>
			GPIOC_PCLK_EN();
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a2b      	ldr	r2, [pc, #172]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 8000664:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000668:	6153      	str	r3, [r2, #20]
}
 800066a:	e04b      	b.n	8000704 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a2b      	ldr	r2, [pc, #172]	@ (800071c <GPIO_PCLK_CTRL+0x104>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d106      	bne.n	8000682 <GPIO_PCLK_CTRL+0x6a>
			GPIOD_PCLK_EN();
 8000674:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a25      	ldr	r2, [pc, #148]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 800067a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800067e:	6153      	str	r3, [r2, #20]
}
 8000680:	e040      	b.n	8000704 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a26      	ldr	r2, [pc, #152]	@ (8000720 <GPIO_PCLK_CTRL+0x108>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d13c      	bne.n	8000704 <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_EN();
 800068a:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 8000690:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000694:	6153      	str	r3, [r2, #20]
}
 8000696:	e035      	b.n	8000704 <GPIO_PCLK_CTRL+0xec>
		if (pGPIOx == GPIOA) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800069e:	d106      	bne.n	80006ae <GPIO_PCLK_CTRL+0x96>
			GPIOA_PCLK_DI();
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006a6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80006aa:	6153      	str	r3, [r2, #20]
}
 80006ac:	e02a      	b.n	8000704 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a18      	ldr	r2, [pc, #96]	@ (8000714 <GPIO_PCLK_CTRL+0xfc>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <GPIO_PCLK_CTRL+0xac>
			GPIOB_PCLK_DI();
 80006b6:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a15      	ldr	r2, [pc, #84]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c0:	6153      	str	r3, [r2, #20]
}
 80006c2:	e01f      	b.n	8000704 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a14      	ldr	r2, [pc, #80]	@ (8000718 <GPIO_PCLK_CTRL+0x100>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d106      	bne.n	80006da <GPIO_PCLK_CTRL+0xc2>
			GPIOC_PCLK_DI();
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006d2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80006d6:	6153      	str	r3, [r2, #20]
}
 80006d8:	e014      	b.n	8000704 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <GPIO_PCLK_CTRL+0x104>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d106      	bne.n	80006f0 <GPIO_PCLK_CTRL+0xd8>
			GPIOD_PCLK_DI();
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80006ec:	6153      	str	r3, [r2, #20]
}
 80006ee:	e009      	b.n	8000704 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000720 <GPIO_PCLK_CTRL+0x108>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d105      	bne.n	8000704 <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_DI();
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <GPIO_PCLK_CTRL+0xf8>)
 80006fe:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000702:	6153      	str	r3, [r2, #20]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400
 8000718:	48000800 	.word	0x48000800
 800071c:	48000c00 	.word	0x48000c00
 8000720:	48001400 	.word	0x48001400

08000724 <GPIO_Toggle_Out_Pin>:
 * Return			: None
 *
 * Note				: N/A
 */

void GPIO_Toggle_Out_Pin(GPIO_REG_t *pGPIOx, uint8_t PinNumber){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	78fa      	ldrb	r2, [r7, #3]
 8000736:	2101      	movs	r1, #1
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	405a      	eors	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	615a      	str	r2, [r3, #20]

}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <GPIO_IRQ_Interrupt_Config>:
 * Return			: None
 *
 * Note				: N/A
 */

void GPIO_IRQ_Interrupt_Config(uint8_t IRQNumber, uint8_t EnDi){
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]

	if (EnDi == ENABLE) {
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d133      	bne.n	80007ca <GPIO_IRQ_Interrupt_Config+0x7e>
		if (IRQNumber <= 31) {
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b1f      	cmp	r3, #31
 8000766:	d80a      	bhi.n	800077e <GPIO_IRQ_Interrupt_Config+0x32>
			// ISER0
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000768:	4b34      	ldr	r3, [pc, #208]	@ (800083c <GPIO_IRQ_Interrupt_Config+0xf0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	2101      	movs	r1, #1
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a31      	ldr	r2, [pc, #196]	@ (800083c <GPIO_IRQ_Interrupt_Config+0xf0>)
 8000778:	430b      	orrs	r3, r1
 800077a:	6013      	str	r3, [r2, #0]
			// ICER2
			*NVIC_ICER0 |= (1 << (IRQNumber % 64));

		}
	}
}
 800077c:	e059      	b.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
		} else if (IRQNumber > 31 && IRQNumber <= 63) {
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b1f      	cmp	r3, #31
 8000782:	d90f      	bls.n	80007a4 <GPIO_IRQ_Interrupt_Config+0x58>
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b3f      	cmp	r3, #63	@ 0x3f
 8000788:	d80c      	bhi.n	80007a4 <GPIO_IRQ_Interrupt_Config+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800078a:	4b2d      	ldr	r3, [pc, #180]	@ (8000840 <GPIO_IRQ_Interrupt_Config+0xf4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	f002 021f 	and.w	r2, r2, #31
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a28      	ldr	r2, [pc, #160]	@ (8000840 <GPIO_IRQ_Interrupt_Config+0xf4>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e046      	b.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
		} else if (IRQNumber > 64 && IRQNumber <= 95) {
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b40      	cmp	r3, #64	@ 0x40
 80007a8:	d943      	bls.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b5f      	cmp	r3, #95	@ 0x5f
 80007ae:	d840      	bhi.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80007b0:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <GPIO_IRQ_Interrupt_Config+0xf8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80007ba:	2101      	movs	r1, #1
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a20      	ldr	r2, [pc, #128]	@ (8000844 <GPIO_IRQ_Interrupt_Config+0xf8>)
 80007c4:	430b      	orrs	r3, r1
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	e033      	b.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
		if (IRQNumber <= 31) {
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b1f      	cmp	r3, #31
 80007ce:	d80a      	bhi.n	80007e6 <GPIO_IRQ_Interrupt_Config+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80007d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <GPIO_IRQ_Interrupt_Config+0xfc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	79fa      	ldrb	r2, [r7, #7]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	4611      	mov	r1, r2
 80007de:	4a1a      	ldr	r2, [pc, #104]	@ (8000848 <GPIO_IRQ_Interrupt_Config+0xfc>)
 80007e0:	430b      	orrs	r3, r1
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	e025      	b.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
		} else if (IRQNumber > 31 && IRQNumber <= 63) {
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b1f      	cmp	r3, #31
 80007ea:	d90f      	bls.n	800080c <GPIO_IRQ_Interrupt_Config+0xc0>
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80007f0:	d80c      	bhi.n	800080c <GPIO_IRQ_Interrupt_Config+0xc0>
			*NVIC_ICER0 |= (1 << (IRQNumber % 32));
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <GPIO_IRQ_Interrupt_Config+0xfc>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	79fa      	ldrb	r2, [r7, #7]
 80007f8:	f002 021f 	and.w	r2, r2, #31
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	4611      	mov	r1, r2
 8000804:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <GPIO_IRQ_Interrupt_Config+0xfc>)
 8000806:	430b      	orrs	r3, r1
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e012      	b.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
		} else if (IRQNumber > 64 && IRQNumber <= 95) {
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b40      	cmp	r3, #64	@ 0x40
 8000810:	d90f      	bls.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b5f      	cmp	r3, #95	@ 0x5f
 8000816:	d80c      	bhi.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
			*NVIC_ICER0 |= (1 << (IRQNumber % 64));
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <GPIO_IRQ_Interrupt_Config+0xfc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	4611      	mov	r1, r2
 800082a:	4a07      	ldr	r2, [pc, #28]	@ (8000848 <GPIO_IRQ_Interrupt_Config+0xfc>)
 800082c:	430b      	orrs	r3, r1
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	e7ff      	b.n	8000832 <GPIO_IRQ_Interrupt_Config+0xe6>
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000e104 	.word	0xe000e104
 8000844:	e000e108 	.word	0xe000e108
 8000848:	e000e180 	.word	0xe000e180

0800084c <GPIO_IRQ_Priority_Config>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_IRQ_Priority_Config(uint8_t IRQNumber, uint32_t IRQPriority) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]

	// 1. find out IPR register
	uint8_t iprx = IRQNumber / 4;
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f003 0303 	and.w	r3, r3, #3
 8000864:	73bb      	strb	r3, [r7, #14]

	uint8_t shift = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENT);
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	3304      	adds	r3, #4
 800086e:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQPriority << shift);
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000878:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800087c:	6819      	ldr	r1, [r3, #0]
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	409a      	lsls	r2, r3
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800088c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000890:	430a      	orrs	r2, r1
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
	...

080008a0 <GPIO_IRQ_Handling>:
 * Return			: None
 *
 * Note				: N/A
 */

void GPIO_IRQ_Handling(uint8_t PinNumber){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	// clear the EXTI PR register
	if (EXTI->PR1 & (1 << PinNumber)) {
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <GPIO_IRQ_Handling+0x3c>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	2101      	movs	r1, #1
 80008b2:	fa01 f202 	lsl.w	r2, r1, r2
 80008b6:	4013      	ands	r3, r2
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d009      	beq.n	80008d0 <GPIO_IRQ_Handling+0x30>
		EXTI->PR1 |= (1 << PinNumber);
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <GPIO_IRQ_Handling+0x3c>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	2101      	movs	r1, #1
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	4611      	mov	r1, r2
 80008ca:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <GPIO_IRQ_Handling+0x3c>)
 80008cc:	430b      	orrs	r3, r1
 80008ce:	6153      	str	r3, [r2, #20]
	}
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40010400 	.word	0x40010400

080008e0 <memset>:
 80008e0:	4402      	add	r2, r0
 80008e2:	4603      	mov	r3, r0
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d100      	bne.n	80008ea <memset+0xa>
 80008e8:	4770      	bx	lr
 80008ea:	f803 1b01 	strb.w	r1, [r3], #1
 80008ee:	e7f9      	b.n	80008e4 <memset+0x4>

080008f0 <__libc_init_array>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000928 <__libc_init_array+0x38>)
 80008f4:	4c0d      	ldr	r4, [pc, #52]	@ (800092c <__libc_init_array+0x3c>)
 80008f6:	1b64      	subs	r4, r4, r5
 80008f8:	10a4      	asrs	r4, r4, #2
 80008fa:	2600      	movs	r6, #0
 80008fc:	42a6      	cmp	r6, r4
 80008fe:	d109      	bne.n	8000914 <__libc_init_array+0x24>
 8000900:	4d0b      	ldr	r5, [pc, #44]	@ (8000930 <__libc_init_array+0x40>)
 8000902:	4c0c      	ldr	r4, [pc, #48]	@ (8000934 <__libc_init_array+0x44>)
 8000904:	f000 f818 	bl	8000938 <_init>
 8000908:	1b64      	subs	r4, r4, r5
 800090a:	10a4      	asrs	r4, r4, #2
 800090c:	2600      	movs	r6, #0
 800090e:	42a6      	cmp	r6, r4
 8000910:	d105      	bne.n	800091e <__libc_init_array+0x2e>
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f855 3b04 	ldr.w	r3, [r5], #4
 8000918:	4798      	blx	r3
 800091a:	3601      	adds	r6, #1
 800091c:	e7ee      	b.n	80008fc <__libc_init_array+0xc>
 800091e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000922:	4798      	blx	r3
 8000924:	3601      	adds	r6, #1
 8000926:	e7f2      	b.n	800090e <__libc_init_array+0x1e>
 8000928:	08000950 	.word	0x08000950
 800092c:	08000950 	.word	0x08000950
 8000930:	08000950 	.word	0x08000950
 8000934:	08000954 	.word	0x08000954

08000938 <_init>:
 8000938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093a:	bf00      	nop
 800093c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800093e:	bc08      	pop	{r3}
 8000940:	469e      	mov	lr, r3
 8000942:	4770      	bx	lr

08000944 <_fini>:
 8000944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000946:	bf00      	nop
 8000948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800094a:	bc08      	pop	{r3}
 800094c:	469e      	mov	lr, r3
 800094e:	4770      	bx	lr
