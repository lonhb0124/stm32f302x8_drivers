
stm32f302x8_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000174  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000048c  08000174  08000174  00001174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000600  08000608  00001608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000600  08000600  00001608  2**0
                  CONTENTS
  4 .ARM          00000000  08000600  08000600  00001608  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000600  08000608  00001608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000600  08000600  00001600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000604  08000604  00001604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000608  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000608  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000785  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023a  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00001ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008b  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014d1  00000000  00000000  0000213b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d16  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004d3c  00000000  00000000  00004322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000905e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  000090a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000092c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000174 <__do_global_dtors_aux>:
 8000174:	b510      	push	{r4, lr}
 8000176:	4c05      	ldr	r4, [pc, #20]	@ (800018c <__do_global_dtors_aux+0x18>)
 8000178:	7823      	ldrb	r3, [r4, #0]
 800017a:	b933      	cbnz	r3, 800018a <__do_global_dtors_aux+0x16>
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <__do_global_dtors_aux+0x1c>)
 800017e:	b113      	cbz	r3, 8000186 <__do_global_dtors_aux+0x12>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x20>)
 8000182:	f3af 8000 	nop.w
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	20000000 	.word	0x20000000
 8000190:	00000000 	.word	0x00000000
 8000194:	080005e8 	.word	0x080005e8

08000198 <frame_dummy>:
 8000198:	b508      	push	{r3, lr}
 800019a:	4b03      	ldr	r3, [pc, #12]	@ (80001a8 <frame_dummy+0x10>)
 800019c:	b11b      	cbz	r3, 80001a6 <frame_dummy+0xe>
 800019e:	4903      	ldr	r1, [pc, #12]	@ (80001ac <frame_dummy+0x14>)
 80001a0:	4803      	ldr	r0, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	bd08      	pop	{r3, pc}
 80001a8:	00000000 	.word	0x00000000
 80001ac:	20000004 	.word	0x20000004
 80001b0:	080005e8 	.word	0x080005e8

080001b4 <delay>:
 */

#include <stdint.h>
#include "stm32f302x8.h"

void delay(void) {
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0

	for (uint32_t i = 0; i < 500000; i++);
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e002      	b.n	80001c6 <delay+0x12>
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	3301      	adds	r3, #1
 80001c4:	607b      	str	r3, [r7, #4]
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4a04      	ldr	r2, [pc, #16]	@ (80001dc <delay+0x28>)
 80001ca:	4293      	cmp	r3, r2
 80001cc:	d9f8      	bls.n	80001c0 <delay+0xc>
}
 80001ce:	bf00      	nop
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	0007a11f 	.word	0x0007a11f

080001e0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af00      	add	r7, sp, #0
	GPIOx_Handle_t GPIO_LED;
	GPIO_LED.pGPIOx = GPIOB; //GPIOA;
 80001e6:	4b19      	ldr	r3, [pc, #100]	@ (800024c <main+0x6c>)
 80001e8:	60fb      	str	r3, [r7, #12]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_13; //GPIO_PIN_5;
 80001ea:	230d      	movs	r3, #13
 80001ec:	743b      	strb	r3, [r7, #16]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_OUT;
 80001ee:	2301      	movs	r3, #1
 80001f0:	747b      	strb	r3, [r7, #17]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
 80001f2:	2303      	movs	r3, #3
 80001f4:	74bb      	strb	r3, [r7, #18]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_OPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	753b      	strb	r3, [r7, #20]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	74fb      	strb	r3, [r7, #19]

	GPIOx_Handle_t GPIO_LED2;
	GPIO_LED2.pGPIOx = GPIOB; //GPIOA;
 80001fe:	4b13      	ldr	r3, [pc, #76]	@ (800024c <main+0x6c>)
 8000200:	603b      	str	r3, [r7, #0]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_14; //GPIO_PIN_5;
 8000202:	230e      	movs	r3, #14
 8000204:	713b      	strb	r3, [r7, #4]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_OUT;
 8000206:	2301      	movs	r3, #1
 8000208:	717b      	strb	r3, [r7, #5]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
 800020a:	2303      	movs	r3, #3
 800020c:	71bb      	strb	r3, [r7, #6]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_OPType = GPIO_OP_TYPE_PP;
 800020e:	2300      	movs	r3, #0
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;
 8000212:	2300      	movs	r3, #0
 8000214:	71fb      	strb	r3, [r7, #7]

	GPIO_PCLK_CTRL(GPIOB, ENABLE);
 8000216:	2101      	movs	r1, #1
 8000218:	480c      	ldr	r0, [pc, #48]	@ (800024c <main+0x6c>)
 800021a:	f000 f927 	bl	800046c <GPIO_PCLK_CTRL>

	GPIO_Init(&GPIO_LED);
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f83d 	bl	80002a2 <GPIO_Init>
	GPIO_Init(&GPIO_LED2);
 8000228:	463b      	mov	r3, r7
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f839 	bl	80002a2 <GPIO_Init>
    /* Loop forever */
	while(1) {
		//GPIO_Toggle_Out_Pin(GPIOA, GPIO_PIN_5);
		GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_13);
 8000230:	210d      	movs	r1, #13
 8000232:	4806      	ldr	r0, [pc, #24]	@ (800024c <main+0x6c>)
 8000234:	f000 f9a0 	bl	8000578 <GPIO_Toggle_Out_Pin>
		delay();
 8000238:	f7ff ffbc 	bl	80001b4 <delay>
		GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_14);
 800023c:	210e      	movs	r1, #14
 800023e:	4803      	ldr	r0, [pc, #12]	@ (800024c <main+0x6c>)
 8000240:	f000 f99a 	bl	8000578 <GPIO_Toggle_Out_Pin>
		delay();
 8000244:	f7ff ffb6 	bl	80001b4 <delay>
		GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_13);
 8000248:	bf00      	nop
 800024a:	e7f1      	b.n	8000230 <main+0x50>
 800024c:	48000400 	.word	0x48000400

08000250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000250:	480d      	ldr	r0, [pc, #52]	@ (8000288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000252:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000254:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000258:	480c      	ldr	r0, [pc, #48]	@ (800028c <LoopForever+0x6>)
  ldr r1, =_edata
 800025a:	490d      	ldr	r1, [pc, #52]	@ (8000290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800025c:	4a0d      	ldr	r2, [pc, #52]	@ (8000294 <LoopForever+0xe>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0a      	ldr	r2, [pc, #40]	@ (8000298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000270:	4c0a      	ldr	r4, [pc, #40]	@ (800029c <LoopForever+0x16>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027e:	f000 f98f 	bl	80005a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000282:	f7ff ffad 	bl	80001e0 <main>

08000286 <LoopForever>:

LoopForever:
  b LoopForever
 8000286:	e7fe      	b.n	8000286 <LoopForever>
  ldr   r0, =_estack
 8000288:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000294:	08000608 	.word	0x08000608
  ldr r2, =_sbss
 8000298:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800029c:	2000001c 	.word	0x2000001c

080002a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC1_2_IRQHandler>

080002a2 <GPIO_Init>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle) {
 80002a2:	b480      	push	{r7}
 80002a4:	b085      	sub	sp, #20
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
	// 1. configure the mode of GPIO pin

	uint32_t temp = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode <= GPIO_MODE_ANALOG) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	795b      	ldrb	r3, [r3, #5]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d81f      	bhi.n	80002f6 <GPIO_Init+0x54>
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	795b      	ldrb	r3, [r3, #5]
 80002ba:	461a      	mov	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	791b      	ldrb	r3, [r3, #4]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa02 f303 	lsl.w	r3, r2, r3
 80002c6:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number)); // clearing
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	791b      	ldrb	r3, [r3, #4]
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	2103      	movs	r1, #3
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	43db      	mvns	r3, r3
 80002dc:	4619      	mov	r1, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	400a      	ands	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	6819      	ldr	r1, [r3, #0]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	430a      	orrs	r2, r1
 80002f4:	601a      	str	r2, [r3, #0]

	} else {
		// interrupt mode
	}
	temp = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Speed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	799b      	ldrb	r3, [r3, #6]
 80002fe:	461a      	mov	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	791b      	ldrb	r3, [r3, #4]
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	fa02 f303 	lsl.w	r3, r2, r3
 800030a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	689a      	ldr	r2, [r3, #8]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	2103      	movs	r1, #3
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	43db      	mvns	r3, r3
 8000320:	4619      	mov	r1, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	400a      	ands	r2, r1
 8000328:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	6899      	ldr	r1, [r3, #8]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	430a      	orrs	r2, r1
 8000338:	609a      	str	r2, [r3, #8]

	// 3. configure pull up / down setting
	temp = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_PuPd << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	79db      	ldrb	r3, [r3, #7]
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	fa02 f303 	lsl.w	r3, r2, r3
 800034e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	68da      	ldr	r2, [r3, #12]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	2103      	movs	r1, #3
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	43db      	mvns	r3, r3
 8000364:	4619      	mov	r1, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	400a      	ands	r2, r1
 800036c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	68d9      	ldr	r1, [r3, #12]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	430a      	orrs	r2, r1
 800037c:	60da      	str	r2, [r3, #12]


	// 4. configure the output type
	temp = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_OPType << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	7a1b      	ldrb	r3, [r3, #8]
 8000386:	461a      	mov	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	791b      	ldrb	r3, [r3, #4]
 800038c:	fa02 f303 	lsl.w	r3, r2, r3
 8000390:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	685a      	ldr	r2, [r3, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	4619      	mov	r1, r3
 800039e:	2301      	movs	r3, #1
 80003a0:	408b      	lsls	r3, r1
 80003a2:	43db      	mvns	r3, r3
 80003a4:	4619      	mov	r1, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	400a      	ands	r2, r1
 80003ac:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	6859      	ldr	r1, [r3, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	430a      	orrs	r2, r1
 80003bc:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	temp = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_ALT) {
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d14a      	bne.n	8000460 <GPIO_Init+0x1be>

		uint8_t temp1, temp2 = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	72fb      	strb	r3, [r7, #11]

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) / 8;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	72bb      	strb	r3, [r7, #10]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) % 8;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	f003 0307 	and.w	r3, r3, #7
 80003de:	72fb      	strb	r3, [r7, #11]

		if (temp1) {
 80003e0:	7abb      	ldrb	r3, [r7, #10]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d01e      	beq.n	8000424 <GPIO_Init+0x182>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	7a5b      	ldrb	r3, [r3, #9]
 80003ea:	461a      	mov	r2, r3
 80003ec:	7afb      	ldrb	r3, [r7, #11]
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * temp2));
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	210f      	movs	r1, #15
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	43db      	mvns	r3, r3
 8000408:	4619      	mov	r1, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	400a      	ands	r2, r1
 8000410:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	430a      	orrs	r2, r1
 8000420:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
			pGPIOHandle->pGPIOx->AFRL |= temp;
		}
	}

}
 8000422:	e01d      	b.n	8000460 <GPIO_Init+0x1be>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7a5b      	ldrb	r3, [r3, #9]
 8000428:	461a      	mov	r2, r3
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	6a1a      	ldr	r2, [r3, #32]
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	210f      	movs	r1, #15
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	43db      	mvns	r3, r3
 8000446:	4619      	mov	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	400a      	ands	r2, r1
 800044e:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	6a19      	ldr	r1, [r3, #32]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	430a      	orrs	r2, r1
 800045e:	621a      	str	r2, [r3, #32]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
	...

0800046c <GPIO_PCLK_CTRL>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_PCLK_CTRL(GPIO_REG_t *pGPIOx, uint8_t EnDi){
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]


	if (EnDi == ENABLE) {
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d136      	bne.n	80004ec <GPIO_PCLK_CTRL+0x80>
		if (pGPIOx == GPIOA) {
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000484:	d106      	bne.n	8000494 <GPIO_PCLK_CTRL+0x28>
			GPIOA_PCLK_EN();
 8000486:	4b37      	ldr	r3, [pc, #220]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a36      	ldr	r2, [pc, #216]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 800048c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000490:	6153      	str	r3, [r2, #20]
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 8000492:	e061      	b.n	8000558 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a34      	ldr	r2, [pc, #208]	@ (8000568 <GPIO_PCLK_CTRL+0xfc>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PCLK_CTRL+0x3e>
			GPIOB_PCLK_EN();
 800049c:	4b31      	ldr	r3, [pc, #196]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	4a30      	ldr	r2, [pc, #192]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 80004a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004a6:	6153      	str	r3, [r2, #20]
}
 80004a8:	e056      	b.n	8000558 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a2f      	ldr	r2, [pc, #188]	@ (800056c <GPIO_PCLK_CTRL+0x100>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PCLK_CTRL+0x54>
			GPIOC_PCLK_EN();
 80004b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 80004b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004bc:	6153      	str	r3, [r2, #20]
}
 80004be:	e04b      	b.n	8000558 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a2b      	ldr	r2, [pc, #172]	@ (8000570 <GPIO_PCLK_CTRL+0x104>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_PCLK_CTRL+0x6a>
			GPIOD_PCLK_EN();
 80004c8:	4b26      	ldr	r3, [pc, #152]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a25      	ldr	r2, [pc, #148]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 80004ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80004d2:	6153      	str	r3, [r2, #20]
}
 80004d4:	e040      	b.n	8000558 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a26      	ldr	r2, [pc, #152]	@ (8000574 <GPIO_PCLK_CTRL+0x108>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d13c      	bne.n	8000558 <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_EN();
 80004de:	4b21      	ldr	r3, [pc, #132]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a20      	ldr	r2, [pc, #128]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 80004e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004e8:	6153      	str	r3, [r2, #20]
}
 80004ea:	e035      	b.n	8000558 <GPIO_PCLK_CTRL+0xec>
		if (pGPIOx == GPIOA) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004f2:	d106      	bne.n	8000502 <GPIO_PCLK_CTRL+0x96>
			GPIOA_PCLK_DI();
 80004f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 80004fa:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80004fe:	6153      	str	r3, [r2, #20]
}
 8000500:	e02a      	b.n	8000558 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a18      	ldr	r2, [pc, #96]	@ (8000568 <GPIO_PCLK_CTRL+0xfc>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <GPIO_PCLK_CTRL+0xac>
			GPIOB_PCLK_DI();
 800050a:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a15      	ldr	r2, [pc, #84]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 8000510:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000514:	6153      	str	r3, [r2, #20]
}
 8000516:	e01f      	b.n	8000558 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a14      	ldr	r2, [pc, #80]	@ (800056c <GPIO_PCLK_CTRL+0x100>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <GPIO_PCLK_CTRL+0xc2>
			GPIOC_PCLK_DI();
 8000520:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 8000526:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800052a:	6153      	str	r3, [r2, #20]
}
 800052c:	e014      	b.n	8000558 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a0f      	ldr	r2, [pc, #60]	@ (8000570 <GPIO_PCLK_CTRL+0x104>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PCLK_CTRL+0xd8>
			GPIOD_PCLK_DI();
 8000536:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a0a      	ldr	r2, [pc, #40]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 800053c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000540:	6153      	str	r3, [r2, #20]
}
 8000542:	e009      	b.n	8000558 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a0b      	ldr	r2, [pc, #44]	@ (8000574 <GPIO_PCLK_CTRL+0x108>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d105      	bne.n	8000558 <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_DI();
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <GPIO_PCLK_CTRL+0xf8>)
 8000552:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000556:	6153      	str	r3, [r2, #20]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	48000400 	.word	0x48000400
 800056c:	48000800 	.word	0x48000800
 8000570:	48000c00 	.word	0x48000c00
 8000574:	48001400 	.word	0x48001400

08000578 <GPIO_Toggle_Out_Pin>:
 * Return			: None
 *
 * Note				: N/A
 */

void GPIO_Toggle_Out_Pin(GPIO_REG_t *pGPIOx, uint8_t PinNumber){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	78fa      	ldrb	r2, [r7, #3]
 800058a:	2101      	movs	r1, #1
 800058c:	fa01 f202 	lsl.w	r2, r1, r2
 8000590:	405a      	eors	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	615a      	str	r2, [r3, #20]

}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <__libc_init_array>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	4d0d      	ldr	r5, [pc, #52]	@ (80005d8 <__libc_init_array+0x38>)
 80005a4:	4c0d      	ldr	r4, [pc, #52]	@ (80005dc <__libc_init_array+0x3c>)
 80005a6:	1b64      	subs	r4, r4, r5
 80005a8:	10a4      	asrs	r4, r4, #2
 80005aa:	2600      	movs	r6, #0
 80005ac:	42a6      	cmp	r6, r4
 80005ae:	d109      	bne.n	80005c4 <__libc_init_array+0x24>
 80005b0:	4d0b      	ldr	r5, [pc, #44]	@ (80005e0 <__libc_init_array+0x40>)
 80005b2:	4c0c      	ldr	r4, [pc, #48]	@ (80005e4 <__libc_init_array+0x44>)
 80005b4:	f000 f818 	bl	80005e8 <_init>
 80005b8:	1b64      	subs	r4, r4, r5
 80005ba:	10a4      	asrs	r4, r4, #2
 80005bc:	2600      	movs	r6, #0
 80005be:	42a6      	cmp	r6, r4
 80005c0:	d105      	bne.n	80005ce <__libc_init_array+0x2e>
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c8:	4798      	blx	r3
 80005ca:	3601      	adds	r6, #1
 80005cc:	e7ee      	b.n	80005ac <__libc_init_array+0xc>
 80005ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d2:	4798      	blx	r3
 80005d4:	3601      	adds	r6, #1
 80005d6:	e7f2      	b.n	80005be <__libc_init_array+0x1e>
 80005d8:	08000600 	.word	0x08000600
 80005dc:	08000600 	.word	0x08000600
 80005e0:	08000600 	.word	0x08000600
 80005e4:	08000604 	.word	0x08000604

080005e8 <_init>:
 80005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ea:	bf00      	nop
 80005ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ee:	bc08      	pop	{r3}
 80005f0:	469e      	mov	lr, r3
 80005f2:	4770      	bx	lr

080005f4 <_fini>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr
