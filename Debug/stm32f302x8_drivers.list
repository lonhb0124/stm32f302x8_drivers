
stm32f302x8_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000174  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000478  08000174  08000174  00001174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ec  080005f4  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005ec  080005ec  000015f4  2**0
                  CONTENTS
  4 .ARM          00000000  080005ec  080005ec  000015f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005ec  080005f4  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ec  080005ec  000015ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005f0  080005f0  000015f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005f4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000077a  00000000  00000000  0000161e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000238  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00001fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008b  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014d1  00000000  00000000  00002113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d0b  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004d32  00000000  00000000  000042ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00009021  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  00009064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00009288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000174 <__do_global_dtors_aux>:
 8000174:	b510      	push	{r4, lr}
 8000176:	4c05      	ldr	r4, [pc, #20]	@ (800018c <__do_global_dtors_aux+0x18>)
 8000178:	7823      	ldrb	r3, [r4, #0]
 800017a:	b933      	cbnz	r3, 800018a <__do_global_dtors_aux+0x16>
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <__do_global_dtors_aux+0x1c>)
 800017e:	b113      	cbz	r3, 8000186 <__do_global_dtors_aux+0x12>
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x20>)
 8000182:	f3af 8000 	nop.w
 8000186:	2301      	movs	r3, #1
 8000188:	7023      	strb	r3, [r4, #0]
 800018a:	bd10      	pop	{r4, pc}
 800018c:	20000000 	.word	0x20000000
 8000190:	00000000 	.word	0x00000000
 8000194:	080005d4 	.word	0x080005d4

08000198 <frame_dummy>:
 8000198:	b508      	push	{r3, lr}
 800019a:	4b03      	ldr	r3, [pc, #12]	@ (80001a8 <frame_dummy+0x10>)
 800019c:	b11b      	cbz	r3, 80001a6 <frame_dummy+0xe>
 800019e:	4903      	ldr	r1, [pc, #12]	@ (80001ac <frame_dummy+0x14>)
 80001a0:	4803      	ldr	r0, [pc, #12]	@ (80001b0 <frame_dummy+0x18>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	bd08      	pop	{r3, pc}
 80001a8:	00000000 	.word	0x00000000
 80001ac:	20000004 	.word	0x20000004
 80001b0:	080005d4 	.word	0x080005d4

080001b4 <delay>:
 */

#include <stdint.h>
#include "stm32f302x8.h"

void delay(void) {
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0

	for (uint32_t i = 0; i < 500000; i++);
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e002      	b.n	80001c6 <delay+0x12>
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	3301      	adds	r3, #1
 80001c4:	607b      	str	r3, [r7, #4]
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4a04      	ldr	r2, [pc, #16]	@ (80001dc <delay+0x28>)
 80001ca:	4293      	cmp	r3, r2
 80001cc:	d9f8      	bls.n	80001c0 <delay+0xc>
}
 80001ce:	bf00      	nop
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	0007a11f 	.word	0x0007a11f

080001e0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
	GPIOx_Handle_t GPIO_LED;	GPIO_LED.pGPIOx = GPIOB; //GPIOA;
 80001e6:	4b14      	ldr	r3, [pc, #80]	@ (8000238 <main+0x58>)
 80001e8:	607b      	str	r3, [r7, #4]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_13; //GPIO_PIN_5;
 80001ea:	230d      	movs	r3, #13
 80001ec:	723b      	strb	r3, [r7, #8]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_OUT;
 80001ee:	2301      	movs	r3, #1
 80001f0:	727b      	strb	r3, [r7, #9]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
 80001f2:	2303      	movs	r3, #3
 80001f4:	72bb      	strb	r3, [r7, #10]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_OPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	GPIO_LED.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_Mode = GPIO_MODE_OUT;
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_Speed = GPIO_OP_HIGH;
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_OPType = GPIO_OP_TYPE_PP;
	GPIO_LED2.GPIO_PinConfig.GPIO_Pin_PuPd = GPIO_NO_PUPD;
*/
	GPIO_PCLK_CTRL(GPIOB, ENABLE);
 80001fe:	2101      	movs	r1, #1
 8000200:	480d      	ldr	r0, [pc, #52]	@ (8000238 <main+0x58>)
 8000202:	f000 f929 	bl	8000458 <GPIO_PCLK_CTRL>

	GPIO_Init(&GPIO_LED);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f840 	bl	800028e <GPIO_Init>

	GPIO_LED.GPIO_PinConfig.GPIO_Pin_Number = GPIO_PIN_14;
 800020e:	230e      	movs	r3, #14
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIO_LED);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f83a 	bl	800028e <GPIO_Init>
    /* Loop forever */
	while(1) {
		//GPIO_Toggle_Out_Pin(GPIOA, GPIO_PIN_5);
		GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_13);
 800021a:	210d      	movs	r1, #13
 800021c:	4806      	ldr	r0, [pc, #24]	@ (8000238 <main+0x58>)
 800021e:	f000 f9a1 	bl	8000564 <GPIO_Toggle_Out_Pin>
		delay();
 8000222:	f7ff ffc7 	bl	80001b4 <delay>
		GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_14);
 8000226:	210e      	movs	r1, #14
 8000228:	4803      	ldr	r0, [pc, #12]	@ (8000238 <main+0x58>)
 800022a:	f000 f99b 	bl	8000564 <GPIO_Toggle_Out_Pin>
		delay();
 800022e:	f7ff ffc1 	bl	80001b4 <delay>
		GPIO_Toggle_Out_Pin(GPIOB, GPIO_PIN_13);
 8000232:	bf00      	nop
 8000234:	e7f1      	b.n	800021a <main+0x3a>
 8000236:	bf00      	nop
 8000238:	48000400 	.word	0x48000400

0800023c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800023c:	480d      	ldr	r0, [pc, #52]	@ (8000274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000240:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000244:	480c      	ldr	r0, [pc, #48]	@ (8000278 <LoopForever+0x6>)
  ldr r1, =_edata
 8000246:	490d      	ldr	r1, [pc, #52]	@ (800027c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000248:	4a0d      	ldr	r2, [pc, #52]	@ (8000280 <LoopForever+0xe>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800024c:	e002      	b.n	8000254 <LoopCopyDataInit>

0800024e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000252:	3304      	adds	r3, #4

08000254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000258:	d3f9      	bcc.n	800024e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025a:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800025c:	4c0a      	ldr	r4, [pc, #40]	@ (8000288 <LoopForever+0x16>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000260:	e001      	b.n	8000266 <LoopFillZerobss>

08000262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000264:	3204      	adds	r2, #4

08000266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000268:	d3fb      	bcc.n	8000262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026a:	f000 f98f 	bl	800058c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026e:	f7ff ffb7 	bl	80001e0 <main>

08000272 <LoopForever>:

LoopForever:
  b LoopForever
 8000272:	e7fe      	b.n	8000272 <LoopForever>
  ldr   r0, =_estack
 8000274:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800027c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000280:	080005f4 	.word	0x080005f4
  ldr r2, =_sbss
 8000284:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000288:	2000001c 	.word	0x2000001c

0800028c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC1_2_IRQHandler>

0800028e <GPIO_Init>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle) {
 800028e:	b480      	push	{r7}
 8000290:	b085      	sub	sp, #20
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
	// 1. configure the mode of GPIO pin

	uint32_t temp = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode <= GPIO_MODE_ANALOG) {
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	795b      	ldrb	r3, [r3, #5]
 800029e:	2b03      	cmp	r3, #3
 80002a0:	d81f      	bhi.n	80002e2 <GPIO_Init+0x54>
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	795b      	ldrb	r3, [r3, #5]
 80002a6:	461a      	mov	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	791b      	ldrb	r3, [r3, #4]
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number)); // clearing
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	791b      	ldrb	r3, [r3, #4]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	2103      	movs	r1, #3
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43db      	mvns	r3, r3
 80002c8:	4619      	mov	r1, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	400a      	ands	r2, r1
 80002d0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6819      	ldr	r1, [r3, #0]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	430a      	orrs	r2, r1
 80002e0:	601a      	str	r2, [r3, #0]

	} else {
		// interrupt mode
	}
	temp = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Speed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	799b      	ldrb	r3, [r3, #6]
 80002ea:	461a      	mov	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	791b      	ldrb	r3, [r3, #4]
 80002f0:	005b      	lsls	r3, r3, #1
 80002f2:	fa02 f303 	lsl.w	r3, r2, r3
 80002f6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	2103      	movs	r1, #3
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	43db      	mvns	r3, r3
 800030c:	4619      	mov	r1, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	400a      	ands	r2, r1
 8000314:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	6899      	ldr	r1, [r3, #8]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	68fa      	ldr	r2, [r7, #12]
 8000322:	430a      	orrs	r2, r1
 8000324:	609a      	str	r2, [r3, #8]

	// 3. configure pull up / down setting
	temp = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_PuPd << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	79db      	ldrb	r3, [r3, #7]
 800032e:	461a      	mov	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	68da      	ldr	r2, [r3, #12]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	791b      	ldrb	r3, [r3, #4]
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	2103      	movs	r1, #3
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	43db      	mvns	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	400a      	ands	r2, r1
 8000358:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	68d9      	ldr	r1, [r3, #12]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	430a      	orrs	r2, r1
 8000368:	60da      	str	r2, [r3, #12]


	// 4. configure the output type
	temp = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_OPType << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	7a1b      	ldrb	r3, [r3, #8]
 8000372:	461a      	mov	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	791b      	ldrb	r3, [r3, #4]
 8000378:	fa02 f303 	lsl.w	r3, r2, r3
 800037c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number));
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	4619      	mov	r1, r3
 800038a:	2301      	movs	r3, #1
 800038c:	408b      	lsls	r3, r1
 800038e:	43db      	mvns	r3, r3
 8000390:	4619      	mov	r1, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	400a      	ands	r2, r1
 8000398:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6859      	ldr	r1, [r3, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	68fa      	ldr	r2, [r7, #12]
 80003a6:	430a      	orrs	r2, r1
 80003a8:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	temp = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Mode == GPIO_MODE_ALT) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	795b      	ldrb	r3, [r3, #5]
 80003b2:	2b02      	cmp	r3, #2
 80003b4:	d14a      	bne.n	800044c <GPIO_Init+0x1be>

		uint8_t temp1, temp2 = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	72fb      	strb	r3, [r7, #11]

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) / 8;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	791b      	ldrb	r3, [r3, #4]
 80003be:	08db      	lsrs	r3, r3, #3
 80003c0:	72bb      	strb	r3, [r7, #10]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Number) % 8;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	791b      	ldrb	r3, [r3, #4]
 80003c6:	f003 0307 	and.w	r3, r3, #7
 80003ca:	72fb      	strb	r3, [r7, #11]

		if (temp1) {
 80003cc:	7abb      	ldrb	r3, [r7, #10]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d01e      	beq.n	8000410 <GPIO_Init+0x182>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	7a5b      	ldrb	r3, [r3, #9]
 80003d6:	461a      	mov	r2, r3
 80003d8:	7afb      	ldrb	r3, [r7, #11]
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	fa02 f303 	lsl.w	r3, r2, r3
 80003e0:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * temp2));
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003e8:	7afb      	ldrb	r3, [r7, #11]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	210f      	movs	r1, #15
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	4619      	mov	r1, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	400a      	ands	r2, r1
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	430a      	orrs	r2, r1
 800040c:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
			pGPIOHandle->pGPIOx->AFRL |= temp;
		}
	}

}
 800040e:	e01d      	b.n	800044c <GPIO_Init+0x1be>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Pin_AltFun << (4 * temp2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	7a5b      	ldrb	r3, [r3, #9]
 8000414:	461a      	mov	r2, r3
 8000416:	7afb      	ldrb	r3, [r7, #11]
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	fa02 f303 	lsl.w	r3, r2, r3
 800041e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	6a1a      	ldr	r2, [r3, #32]
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	210f      	movs	r1, #15
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	4619      	mov	r1, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	400a      	ands	r2, r1
 800043a:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	6a19      	ldr	r1, [r3, #32]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	430a      	orrs	r2, r1
 800044a:	621a      	str	r2, [r3, #32]
}
 800044c:	bf00      	nop
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
	...

08000458 <GPIO_PCLK_CTRL>:
 *
 * Return			: None
 *
 * Note				: N/A
 */
void GPIO_PCLK_CTRL(GPIO_REG_t *pGPIOx, uint8_t EnDi){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]


	if (EnDi == ENABLE) {
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d136      	bne.n	80004d8 <GPIO_PCLK_CTRL+0x80>
		if (pGPIOx == GPIOA) {
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000470:	d106      	bne.n	8000480 <GPIO_PCLK_CTRL+0x28>
			GPIOA_PCLK_EN();
 8000472:	4b37      	ldr	r3, [pc, #220]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a36      	ldr	r2, [pc, #216]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 8000478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800047c:	6153      	str	r3, [r2, #20]
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 800047e:	e061      	b.n	8000544 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a34      	ldr	r2, [pc, #208]	@ (8000554 <GPIO_PCLK_CTRL+0xfc>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PCLK_CTRL+0x3e>
			GPIOB_PCLK_EN();
 8000488:	4b31      	ldr	r3, [pc, #196]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a30      	ldr	r2, [pc, #192]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 800048e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000492:	6153      	str	r3, [r2, #20]
}
 8000494:	e056      	b.n	8000544 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a2f      	ldr	r2, [pc, #188]	@ (8000558 <GPIO_PCLK_CTRL+0x100>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PCLK_CTRL+0x54>
			GPIOC_PCLK_EN();
 800049e:	4b2c      	ldr	r3, [pc, #176]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004a8:	6153      	str	r3, [r2, #20]
}
 80004aa:	e04b      	b.n	8000544 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a2b      	ldr	r2, [pc, #172]	@ (800055c <GPIO_PCLK_CTRL+0x104>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PCLK_CTRL+0x6a>
			GPIOD_PCLK_EN();
 80004b4:	4b26      	ldr	r3, [pc, #152]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a25      	ldr	r2, [pc, #148]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80004be:	6153      	str	r3, [r2, #20]
}
 80004c0:	e040      	b.n	8000544 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a26      	ldr	r2, [pc, #152]	@ (8000560 <GPIO_PCLK_CTRL+0x108>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d13c      	bne.n	8000544 <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_EN();
 80004ca:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a20      	ldr	r2, [pc, #128]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004d4:	6153      	str	r3, [r2, #20]
}
 80004d6:	e035      	b.n	8000544 <GPIO_PCLK_CTRL+0xec>
		if (pGPIOx == GPIOA) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004de:	d106      	bne.n	80004ee <GPIO_PCLK_CTRL+0x96>
			GPIOA_PCLK_DI();
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004e6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80004ea:	6153      	str	r3, [r2, #20]
}
 80004ec:	e02a      	b.n	8000544 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOB) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a18      	ldr	r2, [pc, #96]	@ (8000554 <GPIO_PCLK_CTRL+0xfc>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_PCLK_CTRL+0xac>
			GPIOB_PCLK_DI();
 80004f6:	4b16      	ldr	r3, [pc, #88]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a15      	ldr	r2, [pc, #84]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 80004fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000500:	6153      	str	r3, [r2, #20]
}
 8000502:	e01f      	b.n	8000544 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOC) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a14      	ldr	r2, [pc, #80]	@ (8000558 <GPIO_PCLK_CTRL+0x100>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d106      	bne.n	800051a <GPIO_PCLK_CTRL+0xc2>
			GPIOC_PCLK_DI();
 800050c:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	4a0f      	ldr	r2, [pc, #60]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 8000512:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000516:	6153      	str	r3, [r2, #20]
}
 8000518:	e014      	b.n	8000544 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOD) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a0f      	ldr	r2, [pc, #60]	@ (800055c <GPIO_PCLK_CTRL+0x104>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <GPIO_PCLK_CTRL+0xd8>
			GPIOD_PCLK_DI();
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 8000528:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800052c:	6153      	str	r3, [r2, #20]
}
 800052e:	e009      	b.n	8000544 <GPIO_PCLK_CTRL+0xec>
		} else if (pGPIOx == GPIOF) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <GPIO_PCLK_CTRL+0x108>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d105      	bne.n	8000544 <GPIO_PCLK_CTRL+0xec>
			GPIOF_PCLK_DI();
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a04      	ldr	r2, [pc, #16]	@ (8000550 <GPIO_PCLK_CTRL+0xf8>)
 800053e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000542:	6153      	str	r3, [r2, #20]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	48000400 	.word	0x48000400
 8000558:	48000800 	.word	0x48000800
 800055c:	48000c00 	.word	0x48000c00
 8000560:	48001400 	.word	0x48001400

08000564 <GPIO_Toggle_Out_Pin>:
 * Return			: None
 *
 * Note				: N/A
 */

void GPIO_Toggle_Out_Pin(GPIO_REG_t *pGPIOx, uint8_t PinNumber){
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	78fa      	ldrb	r2, [r7, #3]
 8000576:	2101      	movs	r1, #1
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	405a      	eors	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	615a      	str	r2, [r3, #20]

}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <__libc_init_array>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	4d0d      	ldr	r5, [pc, #52]	@ (80005c4 <__libc_init_array+0x38>)
 8000590:	4c0d      	ldr	r4, [pc, #52]	@ (80005c8 <__libc_init_array+0x3c>)
 8000592:	1b64      	subs	r4, r4, r5
 8000594:	10a4      	asrs	r4, r4, #2
 8000596:	2600      	movs	r6, #0
 8000598:	42a6      	cmp	r6, r4
 800059a:	d109      	bne.n	80005b0 <__libc_init_array+0x24>
 800059c:	4d0b      	ldr	r5, [pc, #44]	@ (80005cc <__libc_init_array+0x40>)
 800059e:	4c0c      	ldr	r4, [pc, #48]	@ (80005d0 <__libc_init_array+0x44>)
 80005a0:	f000 f818 	bl	80005d4 <_init>
 80005a4:	1b64      	subs	r4, r4, r5
 80005a6:	10a4      	asrs	r4, r4, #2
 80005a8:	2600      	movs	r6, #0
 80005aa:	42a6      	cmp	r6, r4
 80005ac:	d105      	bne.n	80005ba <__libc_init_array+0x2e>
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b4:	4798      	blx	r3
 80005b6:	3601      	adds	r6, #1
 80005b8:	e7ee      	b.n	8000598 <__libc_init_array+0xc>
 80005ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80005be:	4798      	blx	r3
 80005c0:	3601      	adds	r6, #1
 80005c2:	e7f2      	b.n	80005aa <__libc_init_array+0x1e>
 80005c4:	080005ec 	.word	0x080005ec
 80005c8:	080005ec 	.word	0x080005ec
 80005cc:	080005ec 	.word	0x080005ec
 80005d0:	080005f0 	.word	0x080005f0

080005d4 <_init>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr

080005e0 <_fini>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr
